[{"title":"Hello","type":0,"sectionRef":"#","url":"blog/hello-world","content":"Welcome to W. W. Norton & Company's style guidelines This is where all our guidelines documenations across different languages will live. This is a work in progress.","keywords":""},{"title":"Introduction","type":0,"sectionRef":"#","url":"docs/","content":"","keywords":""},{"title":"W. W. Norton Configs","type":1,"pageTitle":"Introduction","url":"docs/#w-w-norton-configs","content":"Our configs are customized to align with our style guides. Style guides and linting configs for code at Norton eslint-config-nortonstylelint-config-nortonprettier-config-norton  "},{"title":"CSS/SASS Style Guide","type":0,"sectionRef":"#","url":"docs/css-sass","content":"","keywords":""},{"title":"Terminology","type":1,"pageTitle":"CSS/SASS Style Guide","url":"docs/css-sass#terminology","content":""},{"title":"Rule declaration","type":1,"pageTitle":"CSS/SASS Style Guide","url":"docs/css-sass#rule-declaration","content":"A “rule declaration” is the name given to a selector (or a group of selectors) with an accompanying group of properties. Here's an example: Copy .listing{ font-size:18px; line-height:1.2; } "},{"title":"Selectors","type":1,"pageTitle":"CSS/SASS Style Guide","url":"docs/css-sass#selectors","content":"In a rule declaration, “selectors” are the bits that determine which elements in the DOM tree will be styled by the defined properties. Selectors can match HTML elements, as well as an element's class, ID, or any of its attributes. Here are some examples of selectors: Copy .my-element-class{ /* ... */ } [aria-hidden]{ /* ... */ } "},{"title":"Properties","type":1,"pageTitle":"CSS/SASS Style Guide","url":"docs/css-sass#properties","content":"Finally, properties are what give the selected elements of a rule declaration their style. Properties are key-value pairs, and a rule declaration can contain one or more property declarations. Property declarations look like this: Copy /* some selector */{ color:#333; background:#f1f1f1; } Use em or rem for font-size: property value# W.W. Norton & Company strongly suggests using em or rem for font-size as opposed to px to ensure that font scaling works as expected accross devices. For all new projects, font sizes should be in em or rem. "},{"title":"CSS","type":1,"pageTitle":"CSS/SASS Style Guide","url":"docs/css-sass#css","content":""},{"title":"Formatting","type":1,"pageTitle":"CSS/SASS Style Guide","url":"docs/css-sass#formatting","content":"Use tabs for indentation.Prefer dashes over camelCasing in class names. Underscores and PascalCasing are okay if you are using BEM (see OOCSS and BEM below). Do not use ID selectors.When using multiple selectors in a rule declaration, give each selector its own line.Put a space before the opening brace { in rule declarations.In properties, put a space after, but not before, the : character.Put closing braces } of rule declarations on a new line.Put blank lines between rule declarations. Bad Copy .avatar{ border:2px solid white; border-radius:50%; } .no, .nope, .not_good{ // ... } #lol-no{ // ... } Good Copy .avatar{ border:2px solid white; border-radius:50%; } .one, .selector, .per-line{ // ... } "},{"title":"Comments","type":1,"pageTitle":"CSS/SASS Style Guide","url":"docs/css-sass#comments","content":"Prefer line comments (// in Sass-land) to block comments.Prefer comments on their own line. Avoid end-of-line comments.Write detailed comments for code that isn't self-documenting: Uses of z-indexCompatibility or browser-specific hacks "},{"title":"OOCSS and BEM","type":1,"pageTitle":"CSS/SASS Style Guide","url":"docs/css-sass#oocss-and-bem","content":"We encourage some combination of OOCSS and BEM for these reasons: It helps create clear, strict relationships between CSS and HTMLIt helps us create reusable, composable componentsIt allows for less nesting and lower specificityIt helps in building scalable stylesheets OOCSS, or “Object Oriented CSS”, is an approach for writing CSS that encourages you to think about your stylesheets as a collection of “objects”: reusable, repeatable snippets that can be used independently throughout a website. Nicole Sullivan's OOCSS wikiSmashing Magazine's Introduction to OOCSS BEM, or “Block-Element-Modifier”, is a naming convention for classes in HTML and CSS. It was originally developed by Yandex with large codebases and scalability in mind, and can serve as a solid set of guidelines for implementing OOCSS. CSS Trick's BEM 101Harry Roberts' introduction to BEM We recommend a variant of BEM with PascalCased “blocks”, which works particularly well when combined with components (e.g. React). Underscores and dashes are still used for modifiers and children. Example Copy // ListingCard.jsx functionListingCard(){ return( <articleclass=\"ListingCard ListingCard--featured\"> <h1class=\"ListingCard__title\">Adorable 2BR in the sunny Mission</h1> <divclass=\"ListingCard__content\"> <p>Vestibulum id ligula porta felis euismod semper.</p> </div> </article> ); } Copy /* ListingCard.css */ .ListingCard{} .ListingCard--featured{} .ListingCard__title{} .ListingCard__content{} .ListingCard is the “block” and represents the higher-level component.ListingCard__title is an “element” and represents a descendant of .ListingCard that helps compose the block as a whole..ListingCard--featured is a “modifier” and represents a different state or variation on the .ListingCard block. "},{"title":"ID selectors","type":1,"pageTitle":"CSS/SASS Style Guide","url":"docs/css-sass#id-selectors","content":"While it is possible to select elements by ID in CSS, it should generally be considered an anti-pattern. ID selectors introduce an unnecessarily high level of specificity to your rule declarations, and they are not reusable. For more on this subject, read CSS Wizardry's article on dealing with specificity. "},{"title":"JavaScript hooks","type":1,"pageTitle":"CSS/SASS Style Guide","url":"docs/css-sass#javascript-hooks","content":"Avoid binding to the same class in both your CSS and JavaScript. Conflating the two often leads to, at a minimum, time wasted during refactoring when a developer must cross-reference each class they are changing, and at its worst, developers being afraid to make changes for fear of breaking functionality. We recommend creating JavaScript-specific classes to bind to, prefixed with .js-: Copy <buttonclass=\"btn btn-primary js-request-to-book\">Request to Book</button> "},{"title":"Border","type":1,"pageTitle":"CSS/SASS Style Guide","url":"docs/css-sass#border","content":"Use 0 instead of none to specify that a style has no border. Bad Copy .foo{ border: none; } Good Copy .foo{ border:0; } "},{"title":"Sass","type":1,"pageTitle":"CSS/SASS Style Guide","url":"docs/css-sass#sass","content":""},{"title":"Syntax","type":1,"pageTitle":"CSS/SASS Style Guide","url":"docs/css-sass#syntax","content":"Use the .scss syntax, never the original .sass syntaxOrder your regular CSS and @include declarations logically (see below) "},{"title":"Ordering of property declarations","type":1,"pageTitle":"CSS/SASS Style Guide","url":"docs/css-sass#ordering-of-property-declarations","content":"W.W. Norton & Company's property ordering style is inspired by the order from GitHub's Primer design system instead of alphabetical. W.W. Norton also adds and groups accessibility properties to the bottom of that list. This list can be found on our Github repository. Property declarations List all standard property declarations, anything that isn't an @include or a nested selector. Copy .btn-green { font-weight: bold; background:'green'; // ... } @include declarations Grouping @includes at the end makes it easier to read the entire selector. Copy .btn-green { font-weight: bold; background:'green'; @includetransition(background 0.5s ease); // ... } Nested selectors Nested selectors, if necessary, go last, and nothing goes after them. Add whitespace between your rule declarations and nested selectors, as well as between adjacent nested selectors. Apply the same guidelines as above to your nested selectors. Copy .btn { font-weight: bold; background:'green'; @includetransition(background 0.5s ease); .icon { margin-right:10px; } } "},{"title":"Variables","type":1,"pageTitle":"CSS/SASS Style Guide","url":"docs/css-sass#variables","content":"Prefer dash-cased variable names (e.g. $my-variable) over camelCased or snake_cased variable names. It is acceptable to prefix variable names that are intended to be used only within the same file with an underscore (e.g. $_my-variable). "},{"title":"Mixins","type":1,"pageTitle":"CSS/SASS Style Guide","url":"docs/css-sass#mixins","content":"Mixins should be used to DRY up your code, add clarity, or abstract complexity--in much the same way as well-named functions. Mixins that accept no arguments can be useful for this, but note that if you are not compressing your payload (e.g. gzip), this may contribute to unnecessary code duplication in the resulting styles. "},{"title":"Extend directive","type":1,"pageTitle":"CSS/SASS Style Guide","url":"docs/css-sass#extend-directive","content":"@extend should be avoided because it has unintuitive and potentially dangerous behavior, especially when used with nested selectors. Even extending top-level placeholder selectors can cause problems if the order of selectors ends up changing later (e.g. if they are in other files and the order the files are loaded shifts). Gzipping should handle most of the savings you would have gained by using @extend, and you can DRY up your stylesheets nicely with mixins. "},{"title":"Nested selectors","type":1,"pageTitle":"CSS/SASS Style Guide","url":"docs/css-sass#nested-selectors","content":"Do not nest selectors more than three levels deep! Copy .page-container { .content { .profile { // STOP! } } } When selectors become this long, you're likely writing CSS that is: Strongly coupled to the HTML (fragile) —OR—Overly specific (powerful) —OR—Not reusable Again: never nest ID selectors! If you must use an ID selector in the first place (and you should really try not to), they should never be nested. If you find yourself doing this, you need to revisit your markup, or figure out why such strong specificity is needed. If you are writing well formed HTML and CSS, you should never need to do this. "},{"title":"React Style Guide","type":0,"sectionRef":"#","url":"docs/react","content":"","keywords":""},{"title":"Basic Rules","type":1,"pageTitle":"React Style Guide","url":"docs/react#basic-rules","content":"Only include one React component per file. However, multiple Stateless, or Pure, Components are allowed per file. eslint: react/no-multi-comp. Always use JSX syntax.Do not use React.createElement unless you’re initializing the app from a file that is not JSX.react/forbid-prop-types will allow arrays and objects only if it is explicitly noted what array and object contains, using arrayOf, objectOf, or shape. "},{"title":"Class vs React.createClass vs stateless","type":1,"pageTitle":"React Style Guide","url":"docs/react#class-vs-reactcreateclass-vs-stateless","content":"If you have internal state and/or refs, prefer class extends React.Component over React.createClass. eslint: react/prefer-es6-classreact/prefer-stateless-function Copy // bad const Listing = React.createClass({ // ... render(){ return<div>{this.state.hello}</div>; } }); // good classListingextendsReact.Component{ // ... render(){ return<div>{this.state.hello}</div>; } } And if you don’t have state or refs, prefer normal functions (not arrow functions) over classes: Copy // bad classListingextendsReact.Component{ render(){ return<div>{this.props.hello}</div>; } } // bad (relying on function name inference is discouraged) constListing=({ hello })=>( <div>{hello}</div> ); // good functionListing({ hello }){ return<div>{hello}</div>; } "},{"title":"Mixins","type":1,"pageTitle":"React Style Guide","url":"docs/react#mixins","content":"Do not use mixins. Why? Mixins introduce implicit dependencies, cause name clashes, and cause snowballing complexity. Most use cases for mixins can be accomplished in better ways via components, higher-order components, or utility modules. "},{"title":"Naming","type":1,"pageTitle":"React Style Guide","url":"docs/react#naming","content":"Extensions: Use .jsx extension for React components. eslint: react/jsx-filename-extension Filename: Use PascalCase for filenames. E.g., ReservationCard.jsx. Reference Naming: Use PascalCase for React components and camelCase for their instances. eslint: react/jsx-pascal-case Copy // bad import reservationCard from'./ReservationCard'; // good import ReservationCard from'./ReservationCard'; // bad const ReservationItem =<ReservationCard/>; // good const reservationItem =<ReservationCard/>; Component Naming: Use the filename as the component name. For example, ReservationCard.jsx should have a reference name of ReservationCard. However, for root components of a directory, use index.jsx as the filename and use the directory name as the component name: Copy // bad import Footer from'./Footer/Footer'; // bad import Footer from'./Footer/index'; // good import Footer from'./Footer'; Higher-order Component Naming: Use a composite of the higher-order component’s name and the passed-in component’s name as the displayName on the generated component. For example, the higher-order component withFoo(), when passed a component Bar should produce a component with a displayName of withFoo(Bar). Why? A component’s displayName may be used by developer tools or in error messages, and having a value that clearly expresses this relationship helps people understand what is happening. Copy // bad exportdefaultfunctionwithFoo(WrappedComponent){ returnfunctionWithFoo(props){ return<WrappedComponent{...props}foo/>; } } // good exportdefaultfunctionwithFoo(WrappedComponent){ functionWithFoo(props){ return<WrappedComponent{...props}foo/>; } const wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name ||'Component'; WithFoo.displayName =`withFoo(${wrappedComponentName})`; return WithFoo; } Props Naming: Avoid using DOM component prop names for different purposes. Why? People expect props like style and className to mean one specific thing. Varying this API for a subset of your app makes the code less readable and less maintainable, and may cause bugs. Copy // bad <MyComponentstyle=\"fancy\"/> // bad <MyComponentclassName=\"fancy\"/> // good <MyComponentvariant=\"fancy\"/> "},{"title":"Declaration","type":1,"pageTitle":"React Style Guide","url":"docs/react#declaration","content":"Do not use displayName for naming components. Instead, name the component by reference. Copy // bad exportdefault React.createClass({ displayName:'ReservationCard', // stuff goes here }); // good exportdefaultclassReservationCardextendsReact.Component{ } "},{"title":"Alignment","type":1,"pageTitle":"React Style Guide","url":"docs/react#alignment","content":"Follow these alignment styles for JSX syntax. eslint: react/jsx-closing-bracket-locationreact/jsx-closing-tag-location Copy // bad <FoosuperLongParam=\"bar\" anotherSuperLongParam=\"baz\"/> // good <Foo superLongParam=\"bar\" anotherSuperLongParam=\"baz\" /> // if props fit in one line then keep it on the same line <Foobar=\"bar\"/> // children get indented normally <Foo superLongParam=\"bar\" anotherSuperLongParam=\"baz\" > <Quux/> </Foo> // bad {showButton && <Button/> } // bad { showButton && <Button/> } // good {showButton &&( <Button/> )} // good {showButton &&<Button/>} "},{"title":"Quotes","type":1,"pageTitle":"React Style Guide","url":"docs/react#quotes","content":"Always use double quotes (\") for JSX attributes, but single quotes (') for all other JS. eslint: jsx-quotes Why? Regular HTML attributes also typically use double quotes instead of single, so JSX attributes mirror this convention. Copy // bad <Foobar='bar'/> // good <Foobar=\"bar\"/> // bad <Foostyle={{ left:\"20px\"}}/> // good <Foostyle={{ left:'20px'}}/> "},{"title":"Spacing","type":1,"pageTitle":"React Style Guide","url":"docs/react#spacing","content":"Always include a single space in your self-closing tag. eslint: no-multi-spaces, react/jsx-tag-spacing Copy // bad <Foo/> // very bad <Foo/> // bad <Foo /> // good <Foo/> Do not pad JSX curly braces with spaces. eslint: react/jsx-curly-spacing Copy // bad <Foobar={ baz }/> // good <Foobar={baz}/> "},{"title":"Props","type":1,"pageTitle":"React Style Guide","url":"docs/react#props","content":"Always use camelCase for prop names. Copy // bad <Foo UserName=\"hello\" phone_number={12345678} /> // good <Foo userName=\"hello\" phoneNumber={12345678} /> Omit the value of the prop when it is explicitly true. eslint: react/jsx-boolean-value Copy // bad <Foo hidden={true} /> // good <Foo hidden /> // good <Foohidden/> Always include an alt prop on <img> tags. If the image is presentational, alt can be an empty string or the <img> must have role=\"presentation\". eslint: jsx-a11y/alt-text Copy // bad <imgsrc=\"hello.jpg\"/> // good <imgsrc=\"hello.jpg\"alt=\"Me waving hello\"/> // good <imgsrc=\"hello.jpg\"alt=\"\"/> // good <imgsrc=\"hello.jpg\"role=\"presentation\"/> Do not use words like \"image\", \"photo\", or \"picture\" in <img>alt props. eslint: jsx-a11y/img-redundant-alt Why? Screenreaders already announce img elements as images, so there is no need to include this information in the alt text. Copy // bad <imgsrc=\"hello.jpg\"alt=\"Picture of me waving hello\"/> // good <imgsrc=\"hello.jpg\"alt=\"Me waving hello\"/> Use only valid, non-abstract ARIA roles. eslint: jsx-a11y/aria-role Copy // bad - not an ARIA role <divrole=\"datepicker\"/> // bad - abstract ARIA role <divrole=\"range\"/> // good <divrole=\"button\"/> Do not use accessKey on elements. eslint: jsx-a11y/no-access-key Why? Inconsistencies between keyboard shortcuts and keyboard commands used by people using screenreaders and keyboards complicate accessibility. Copy // bad <divaccessKey=\"h\"/> // good <div/> Avoid using an array index as key prop, prefer a stable ID. eslint: react/no-array-index-key Why? Not using a stable ID is an anti-pattern because it can negatively impact performance and cause issues with component state. We don’t recommend using indexes for keys if the order of items may change. Copy // bad {todos.map((todo, index)=> <Todo {...todo} key={index} /> )} // good {todos.map(todo=>( <Todo {...todo} key={todo.id} /> ))} Always define explicit defaultProps for all non-required props. Why? propTypes are a form of documentation, and providing defaultProps means the reader of your code doesn’t have to assume as much. In addition, it can mean that your code can omit certain type checks. Copy // bad functionSFC({ foo, bar, children }){ return<div>{foo}{bar}{children}</div>; } SFC.propTypes ={ foo: PropTypes.number.isRequired, bar: PropTypes.string, children: PropTypes.node, }; // good functionSFC({ foo, bar, children }){ return<div>{foo}{bar}{children}</div>; } SFC.propTypes ={ foo: PropTypes.number.isRequired, bar: PropTypes.string, children: PropTypes.node, }; SFC.defaultProps ={ bar:'', children:null, }; Use spread props sparingly. Why? Otherwise you’re more likely to pass unnecessary props down to components. And for React v15.6.1 and older, you could pass invalid HTML attributes to the DOM. Exceptions: HOCs that proxy down props and hoist propTypes Copy functionHOC(WrappedComponent){ returnclassProxyextendsReact.Component{ Proxy.propTypes ={ text: PropTypes.string, isLoading: PropTypes.bool }; render(){ return<WrappedComponent{...this.props}/> } } } Spreading objects with known, explicit props. This can be particularly useful when testing React components with Mocha’s beforeEach construct. Copy exportdefaultfunction Foo { const props ={ text:'', isPublished:false } return(<div{...props}/>); } Notes for use: Filter out unnecessary props when possible. Also, use prop-types-exact to help prevent bugs. Copy // bad render(){ const{ irrelevantProp,...relevantProps }=this.props; return<WrappedComponent{...this.props}/> } // good render(){ const{ irrelevantProp,...relevantProps }=this.props; return<WrappedComponent{...relevantProps}/> } "},{"title":"Refs","type":1,"pageTitle":"React Style Guide","url":"docs/react#refs","content":"Always use ref callbacks. eslint: react/no-string-refs Copy // bad <Foo ref=\"myRef\" /> // good <Foo ref={(ref)=>{this.myRef = ref;}} /> "},{"title":"Parentheses","type":1,"pageTitle":"React Style Guide","url":"docs/react#parentheses","content":"Wrap JSX tags in parentheses when they span more than one line. eslint: react/jsx-wrap-multilines Copy // bad render(){ return<MyComponentvariant=\"long body\"foo=\"bar\"> <MyChild/> </MyComponent>; } // good render(){ return( <MyComponentvariant=\"long body\"foo=\"bar\"> <MyChild/> </MyComponent> ); } // good, when single line render(){ const body =<div>hello</div>; return<MyComponent>{body}</MyComponent>; } "},{"title":"Tags","type":1,"pageTitle":"React Style Guide","url":"docs/react#tags","content":"Always self-close tags that have no children. eslint: react/self-closing-comp Copy // bad <Foovariant=\"stuff\"></Foo> // good <Foovariant=\"stuff\"/> If your component has multiline properties, close its tag on a new line. eslint: react/jsx-closing-bracket-location Copy // bad <Foo bar=\"bar\" baz=\"baz\"/> // good <Foo bar=\"bar\" baz=\"baz\" /> "},{"title":"Methods","type":1,"pageTitle":"React Style Guide","url":"docs/react#methods","content":"Use arrow functions to close over local variables. It is handy when you need to pass additional data to an event handler. Although, make sure they do not massively hurt performance, in particular when passed to custom components that might be PureComponents, because they will trigger a possibly needless rerender every time. Copy functionItemList(props){ return( <ul> {props.items.map((item, index)=>( <Item key={item.key} onClick={(event)=>{doSomethingWith(event, item.name, index);}} /> ))} </ul> ); } Bind event handlers for the render method in the constructor. eslint: react/jsx-no-bind Why? A bind call in the render path creates a brand new function on every single render. Do not use arrow functions in class fields, because it makes them challenging to test and debug, and can negatively impact performance, and because conceptually, class fields are for data, not logic. Copy // bad classextends React.Component { onClickDiv(){ // do stuff } render(){ return<divonClick={this.onClickDiv.bind(this)}/>; } } // very bad classextends React.Component { onClickDiv=()=>{ // do stuff } render(){ return<divonClick={this.onClickDiv}/> } } // good classextends React.Component { constructor(props){ super(props); this.onClickDiv =this.onClickDiv.bind(this); } onClickDiv(){ // do stuff } render(){ return<divonClick={this.onClickDiv}/>; } } Do not use underscore prefix for internal methods of a React component. Why? Underscore prefixes are sometimes used as a convention in other languages to denote privacy. But, unlike those languages, there is no native support for privacy in JavaScript, everything is public. Regardless of your intentions, adding underscore prefixes to your properties does not actually make them private, and any property (underscore-prefixed or not) should be treated as being public. See issues #1024, and #490 for a more in-depth discussion. Copy // bad React.createClass({ _onClickSubmit(){ // do stuff }, // other stuff }); // good classextends React.Component { onClickSubmit(){ // do stuff } // other stuff } Be sure to return a value in your render methods. eslint: react/require-render-return Copy // bad render(){ (<div/>); } // good render(){ return(<div/>); } "},{"title":"Ordering","type":1,"pageTitle":"React Style Guide","url":"docs/react#ordering","content":"Ordering for class extends React.Component: optional static methodsconstructorgetChildContextcomponentWillMountcomponentDidMountcomponentWillReceivePropsshouldComponentUpdatecomponentWillUpdatecomponentDidUpdatecomponentWillUnmountclickHandlers or eventHandlers like onClickSubmit() or onChangeDescription()getter methods for render like getSelectReason() or getFooterContent()optional render methods like renderNavigation() or renderProfilePicture()render How to define propTypes, defaultProps, contextTypes, etc... Copy import React from'react'; import PropTypes from'prop-types'; const propTypes ={ id: PropTypes.number.isRequired, url: PropTypes.string.isRequired, text: PropTypes.string, }; const defaultProps ={ text:'Hello World', }; classLinkextendsReact.Component{ staticmethodsAreOk(){ returntrue; } render(){ return<ahref={this.props.url}data-id={this.props.id}>{this.props.text}</a>; } } Link.propTypes = propTypes; Link.defaultProps = defaultProps; exportdefault Link; Ordering for React.createClass: eslint: react/sort-comp displayNamepropTypescontextTypeschildContextTypesmixinsstaticsdefaultPropsgetDefaultPropsgetInitialStategetChildContextcomponentWillMountcomponentDidMountcomponentWillReceivePropsshouldComponentUpdatecomponentWillUpdatecomponentDidUpdatecomponentWillUnmountclickHandlers or eventHandlers like onClickSubmit() or onChangeDescription()getter methods for render like getSelectReason() or getFooterContent()optional render methods like renderNavigation() or renderProfilePicture()render "},{"title":"isMounted","type":1,"pageTitle":"React Style Guide","url":"docs/react#ismounted","content":"Do not use isMounted. eslint: react/no-is-mounted Why? isMounted is an anti-pattern, is not available when using ES6 classes, and is on its way to being officially deprecated. "},{"title":"Typescript Style Guide","type":0,"sectionRef":"#","url":"docs/typescript","content":"","keywords":""},{"title":"Official Typescript Documentation","type":1,"pageTitle":"Typescript Style Guide","url":"docs/typescript#official-typescript-documentation","content":"Familiar With TypeScript already? The starting point for learning TypeScript TypeScript Best Practices - Semicolons and Spacing "},{"title":"General","type":1,"pageTitle":"Typescript Style Guide","url":"docs/typescript#general","content":"No Unused Expressions We shouldn't have unused expressions in our code. If we have them, we should remove them. Copy // Bad 👎 a + b; // Good 👍 let add = a + b; Filename Name files with camelCase. Reason: Conventional across many JS teams. Copy accordion.tsx myControl.tsx stringUtils.ts map.ts  "},{"title":"Variables and Function","type":1,"pageTitle":"Typescript Style Guide","url":"docs/typescript#variables-and-function","content":"Use camelCase for variable and function names Reason: Conventional JavaScript Copy // Bad 👎 varFooVar; functionBarFunc(){} // Good 👍 var fooVar; functionbarFunc(){} No Unused Variables @typescript-eslint/no-unused-vars Likewise, if we have unused variables, then we should remove them. Copy // Bad 👎 var num1 =10; var num2 =7; var result = num1 +7; // Good 👍 var num1 =10; var result = num1 +7; // Good 👍 var num1 =10; var num2 =7; var result = num1 + num2; Don’t Use Variables Before they’re Defined With variables that are declared with var we can reference the variable before they’re defined, but the value will be undefined. This is because the variable is hoisted. let and const solve this problem since they aren’t hoisted. Therefore, we should use let or const variables. This way, if we reference those variables, we’ll get an error. Copy // Bad 👎 var hoisted; console.log(hoisted);// will be undefined; // Good 👍 let notHoisted; const alsoNotHoisted; console.log(notHoisted);// Will throw an error (which is what we want in this case); console.log(alsoNotHoisted);// Will also throw an error (which is what we want in this case); Replace Magic Numbers with Named Constants @typescript-eslint/prefer-as-const If we have numbers that are used as constants repeatedly but aren’t assigned to a constant, then we should assign it to one. This way, we can change it once and the value will be reflected everywhere. Also, named constants tell us the meaning of the number. Therefore, instead of writing: Copy // Bad 👎 enumFoo{ bar =1} // Good 👍 constNUMBER_OF_BARS=1; enumFoo{ bar =NUMBER_OF_BARS} Don’t Use async if await isn’t Used Inside the Function @typescript-eslint/require-await We should use async functions only if we have to await something inside it. For instance, if we have something like: Copy // Bad 👎 constfoo=async()=>\"bar\"; // Good 👍 constfoo=async()=>{ const url =\"some.domain.com\"; let response =awaitfetch(url,{ method:'GET' }); } then we should use a normal function. Return Awaited Values Consistently We should not have return and await on the same line since the promises may not have resolved yet. Instead, put them on separate lines. The only exception to this is that we can put return and await on the same line inside a try block to catch errors from another promised-based function Copy // Bad 👎 asyncfunctionfoo(){ returnawaitbar(); } // Good 👍 asyncfunctionfoo(){ const val =awaitbar(); return val; } // Good 👍 asyncfunctionfoo(){ try{ returnawaitbar(); }catch(error){} } "},{"title":"Array","type":1,"pageTitle":"Typescript Style Guide","url":"docs/typescript#array","content":"Annotate arrays as foos:Foo[] instead of foos:Array<Foo>. Reasons: Its easier to read. Its used by the TypeScript team. Makes easier to know something is an array as the mind is trained to detect []. Copy // Bad 👎 foos:Array<Foo>; // Good 👍 foos:Foo[]; "},{"title":"Strings","type":1,"pageTitle":"Typescript Style Guide","url":"docs/typescript#strings","content":"Prefer single quotes (') unless escaping. Reason: More JavaScript teams do this (e.g. airbnb, standard, npm, node, google/angular, facebook/react). Its easier to type (no shift needed on most keyboards). Prettier team recommends single quotes as well Double quotes are not without merit: Allows easier copy paste of objects into JSON. Allows people to use other languages to work without changing their quote character. Allows you to use apostrophes e.g. He's not going.. But I'd rather not deviate from where the JS Community is fairly decided. Copy // bad 👎 var foo =\"bad\"; // good 👍 var foo ='bar'; When you can't use double quotes, try using back ticks (`). @typescript-eslint/restrict-template-expressions Reason: These generally represent the intent of complex enough strings. Copy // good 👍 var foo =`this foo has a dynamic ${bar}`; Have Consistent Use of Backticks, Double Quotes or Single Quotes We should use backticks or quotes in a consistent manner for declaring strings. Better yet, we should use backticks since they’ll create template strings, which are more flexible. They allow expressions to be embedded in it. "},{"title":"Class","type":1,"pageTitle":"Typescript Style Guide","url":"docs/typescript#class","content":"Use PascalCase for class names. Reason: This is actually fairly conventional in standard JavaScript. Copy // Bad 👎 classfooBoo{} // Good 👍 classFooBoo{} Use camelCase of class members and methods Reason: Naturally follows from variable and function naming convention. Copy // Bad 👎 classFoo{ BarVar:number; BazFunc(){} } // Good 👍 classFoo{ barVar:number; bazFunc(){} } No Useless Constructors @typescript-eslint/no-useless-constructor We shouldn’t have useless constructors. Copy // Bad 👎 classA{ constructor(){ } } // Bad 👎 classBextendsA{ constructor(value){ super(value); } } They’re both redundant so they should be removed. "},{"title":"Interface","type":1,"pageTitle":"Typescript Style Guide","url":"docs/typescript#interface","content":"Use PascalCase for name. Reason: Similar to class Copy // Bad 👎 interfacethemeProps{ color:string; } // Good 👍 interfaceThemeProps{ color:string; } Use camelCase for members. Reason: Similar to class Copy // Bad 👎 interfaceColorProps{ FirstColor:string; second-color:string; } // Good 👍 interfaceColorProps{ firstColor:string; secondColor:string; } Don't prefix with I Reason: Unconventional. lib.d.ts defines important interfaces without an I (e.g. Window, Document etc). Copy // Bad 👎 interfaceIFoo{ } // Good 👍 interfaceFoo{ } "},{"title":"Type","type":1,"pageTitle":"Typescript Style Guide","url":"docs/typescript#type","content":"Use PascalCase for name. Reason: Similar to class Copy // Bad 👎 type infoBaseProps ='htmlFor'|'className'|'children'|'id'; // Good 👍 typeInfoBaseProps='htmlFor'|'className'|'children'|'id'; Use camelCase for members. Reason: Similar to class Copy // Bad 👎 typeAnimal={ animalrace:string } // Good 👍 typeAnimal={ animalRace:string } "},{"title":"Type vs. Interface","type":1,"pageTitle":"Typescript Style Guide","url":"docs/typescript#type-vs-interface","content":"Use type when you might need a union or intersection: Copy // Good 👍 typeFoo=number|{ someProperty:number} Use interface when you want extends or implements e.g Copy // Good 👍 interfaceFoo{ foo:string; } interfaceFooBarextendsFoo{ bar:string; } classXimplementsFooBar{ foo:string; bar:string; } "},{"title":"Namespace","type":1,"pageTitle":"Typescript Style Guide","url":"docs/typescript#namespace","content":"Use PascalCase for names Reason: Convention followed by the TypeScript team. Namespaces are effectively just a class with static members. Class names are PascalCase => Namespace names are PascalCase Copy // Bad 👎 namespace fooBaz { } // Good 👍 namespaceFooBaz{ } Enum# Use PascalCase for enum names Reason: Similar to Class. Is a Type. Copy // Bad 👎 enum colorOne { } // Good 👍 enumColorOne{ } Use PascalCase for enum member Reason: Convention followed by TypeScript team i.e. the language creators e.g SyntaxKind.StringLiteral. Also helps with translation (code generation) of other languages into TypeScript Copy // Bad 👎 enumColor{ redHue } // Good 👍 enumColor{ RedHue } "},{"title":"Null vs. Undefined","type":1,"pageTitle":"Typescript Style Guide","url":"docs/typescript#null-vs-undefined","content":"Prefer not to use either for explicit unavailability Reason: these values are commonly used to keep a consistent structure between values. In TypeScript you use types to denote the structure Copy // Bad 👎 let foo ={ x:123, y:undefined }; // Good 👍 let foo:{ x:number, y?:number}={ x:123}; Use undefined in general (do consider returning an object like {valid:boolean,value?:Foo} instead) Copy // Bad 👎 returnnull; // Good 👍 return undefined; Use null where its a part of the API or conventional Reason: It is conventional in Node.js e.g. error is null for NodeBack style callbacks. Copy // Bad 👎 cb(undefined) // Good 👍 cb(null) Use truthy check for objects being null or undefined Copy // Bad 👎 if(error ===null) // Good 👍 if(error) Use == null / != null (not === / !==) to check for null / undefined on primitives as it works for both null/undefined but not other falsy values (like '',0,false) e.g. Copy // Bad 👎 if(error !==null)// does not rule out undefined // Good 👍 if(error !=null)// rules out both null and undefined "},{"title":"Tabs vs. Spaces","type":1,"pageTitle":"Typescript Style Guide","url":"docs/typescript#tabs-vs-spaces","content":"Use tabs over spaces. Reason: Use tabs for indenting your code. With tabs users can choose their desired width. This has positive implications for accessibility and screenreaders, putting people in control of how they want to view the code. Copy // bad 👎 functionfoo(){ ∙∙let name; } // bad 👎 functionbar(){ ∙let name; } // good 👍 functionbaz(){ ∙ let name; } "},{"title":"Semicolons","type":1,"pageTitle":"Typescript Style Guide","url":"docs/typescript#semicolons","content":"Use semicolons. Reasons: The usage of semicolons is a core value of our community. Consider the points of the opposition, but be a traditionalist when it comes to abusing error correction mechanisms for cheap syntactic pleasures. Explicit semicolons helps language formatting tools give consistent results. Missing ASI (automatic semicolon insertion) can trip new devs. Copy // Bad 👎 let x =5 // Good 👍 let x =5; We should put in semicolons in our code instead of letting the JavaScript interpreter add them for us in unexpected places. Remove Useless Semicolons @typescript-eslint/no-extra-semi We should remove duplicate semicolons in our code. We only need one semicolon at the end of a statement. Copy // Bad 👎 let x =5;; // Good 👍 let x =5; Require Semicolons Instead of Automatic Semicolon Insertion Instead of letting the Javascript interpreter put in semicolons for us, we should put them in ourselves. Copy // Bad 👎 functionreturnObject(){ return//<-----semi colon will be inserted causing an error. { key: value }; } // Good 👍 functionreturnObject(){ return{ key: value }; } "},{"title":"Javascript Style Guide","type":0,"sectionRef":"#","url":"docs/javascript","content":"","keywords":""},{"title":"Formatting","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#formatting","content":""},{"title":"Tabs for Indentation","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#tabs-for-indentation","content":"Use tabs for indenting your code. With tabs users can choose their desired width. This has positive implications for accessibility and screenreaders, putting people in control of how they want to view the code. "},{"title":"Newlines","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#newlines","content":"Use UNIX-style newlines (\\n), and a newline character as the last character of a file. Windows-style newlines (\\r\\n) are forbidden inside any repository. "},{"title":"No trailing whitespace","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#no-trailing-whitespace","content":"Always clean up any trailing whitespace in your .js files before committing. "},{"title":"Use semicolons","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#use-semicolons","content":"According to scientific research, the usage of semicolons is a core value of our community. Consider the points of the opposition, but be a traditionalist when it comes to abusing error correction mechanisms for cheap syntactic pleasures. "},{"title":"100 characters per line","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#100-characters-per-line","content":"Limit your lines to 100 characters. "},{"title":"Use single quotes","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#use-single-quotes","content":"Use single quotes, unless you are writing JSON. This helps you separate your objects' strings from normal strings. Copy // bad 👎 var foo =\"bad\"; // good 👍 var foo ='bar'; Opening braces go on the same line, Your opening braces go on the same line as the statement. Copy // bad 👎 if(true) { console.log('losing'); } // good 👍 if(true){ console.log('winning'); } Also, notice the use of whitespace before and after the condition statement. What if you want to write 'else' or 'else if' along with your 'if'... Copy // bad 👎 if(true) { console.log('losing'); } elseif(false) { console.log('this is bad'); } else { console.log('not good'); } // good 👍 if(true){ console.log('winning'); }elseif(false){ console.log('this is good'); }else{ console.log('finally'); } "},{"title":"Declare one variable per var statement","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#declare-one-variable-per-var-statement","content":"Declare one variable per var statement, it makes it easier to re-order the lines. Copy // bad 👎 var keys =['foo','bar'], values =[23,42], object ={}, key; // good 👍 var keys =['foo','bar']; var values =[23,42]; var object ={}; "},{"title":"Whitespace","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#whitespace","content":""},{"title":"Use tabs","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#use-tabs","content":"eslint: indent Copy // bad 👎 functionfoo(){ ∙∙let name; } // bad 👎 functionbar(){ ∙let name; } // good 👍 functionbaz(){ ∙ let name; } "},{"title":"Space Before Blocks","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#space-before-blocks","content":"Place 1 space before the leading brace. eslint: space-before-blocks Copy // bad 👎 functiontest(){ console.log('test'); } // good 👍 functiontest(){ console.log('test'); } // bad 👎 dog.set('attr',{ age:'1 year', breed:'Bernese Mountain Dog', }); // good 👍 dog.set('attr',{ age:'1 year', breed:'Bernese Mountain Dog', }); "},{"title":"Keyword Spacing","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#keyword-spacing","content":"Place 1 space before the opening parenthesis in control statements (if, while etc.). Place no space between the argument list and the function name in function calls and declarations. eslint: keyword-spacing Copy // bad 👎 if(isJedi){ fight(); } // good 👍 if(isJedi){ fight(); } // bad 👎 functionfight(){ console.log('Swooosh!'); } // good 👍 functionfight(){ console.log('Swooosh!'); } "},{"title":"Space Around Infix Operators","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#space-around-infix-operators","content":"Set off operators with spaces. eslint: space-infix-ops Copy // bad 👎 const x=y+5; // good 👍 const x = y +5; "},{"title":"End of File","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#end-of-file","content":"End files with a single newline character. eslint: eol-last Copy // bad 👎 import{ es6 }from'./AirbnbStyleGuide'; // ... exportdefault es6; Copy // bad 👎 import{ es6 }from'./AirbnbStyleGuide'; // ... exportdefault es6;↵ ↵ Copy // good 👍 import{ es6 }from'./AirbnbStyleGuide'; // ... exportdefault es6;↵ "},{"title":"Chained Calls","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#chained-calls","content":"Use indentation when making long method chains (more than 2 method chains). Use a leading dot, which emphasizes that the line is a method call, not a new statement. eslint: newline-per-chained-calleslint: no-whitespace-before-property Copy // bad 👎 $('#items').find('.selected').highlight().end().find('.open').updateCount(); // bad 👎 $('#items'). find('.selected'). highlight(). end(). find('.open'). updateCount(); // good 👍 $('#items') .find('.selected') .highlight() .end() .find('.open') .updateCount(); // bad 👎 const leds = stage.selectAll('.led').data(data).enter().append('svg:svg').classed('led',true) .attr('width',(radius + margin)*2).append('svg:g') .attr('transform',`translate(${radius + margin},${radius + margin})`) .call(tron.led); // good 👍 const leds = stage.selectAll('.led') .data(data) .enter().append('svg:svg') .classed('led',true) .attr('width',(radius + margin)*2) .append('svg:g') .attr('transform',`translate(${radius + margin},${radius + margin})`) .call(tron.led); // good 👍 const leds = stage.selectAll('.led').data(data); "},{"title":"Padding","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#padding","content":"Blank Lines# Leave a blank line after blocks and before the next statement. Copy // bad 👎 if(foo){ return bar; } return baz; // good 👍 if(foo){ return bar; } return baz; // bad 👎 const obj ={ foo(){ }, bar(){ }, }; return obj; // good 👍 const obj ={ foo(){ }, bar(){ }, }; return obj; // bad 👎 const arr =[ functionfoo(){ }, functionbar(){ }, ]; return arr; // good 👍 const arr =[ functionfoo(){ }, functionbar(){ }, ]; return arr; Padded Blocks# Do not pad your blocks with blank lines. eslint: padded-blocks Copy // bad 👎 functionbar(){ console.log(foo); } // bad 👎 if(baz){ console.log(qux); }else{ console.log(foo); } // bad 👎 classFoo{ constructor(bar){ this.bar= bar; } } // good 👍 functionbar(){ console.log(foo); } // good 👍 if(baz){ console.log(qux); }else{ console.log(foo); } No Multiple Blank Lines# Do not use multiple blank lines to pad your code. eslint: no-multiple-empty-lines Copy // bad 👎 classPerson{ constructor(fullName, email, birthday){ this.fullName= fullName; this.email= email; this.setAge(birthday); } setAge(birthday){ const today =newDate(); const age =this.getAge(today, birthday); this.age= age; } getAge(today, birthday){ // .. } } // good 👍 classPerson{ constructor(fullName, email, birthday){ this.fullName= fullName; this.email= email; this.setAge(birthday); } setAge(birthday){ const today =newDate(); const age =getAge(today, birthday); this.age= age; } getAge(today, birthday){ // .. } } "},{"title":"Spacing","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#spacing","content":"Parentheses Spacing# Do not add spaces inside parentheses. eslint: space-in-parens Copy // bad 👎 functionbar(foo){ return foo; } // good 👍 functionbar(foo){ return foo; } // bad 👎 if( foo ){ console.log(foo); } // good 👍 if(foo){ console.log(foo); } Inside Brackets# Do not add spaces inside brackets. eslint: array-bracket-spacing Copy // bad 👎 const foo =[1,2,3]; console.log(foo[0]); // good 👍 const foo =[1,2,3]; console.log(foo[0]); Inside Curly Braces# Add spaces inside curly braces. eslint: object-curly-spacing Copy // bad 👎 const foo ={clark:'kent'}; // good 👍 const foo ={ clark:'kent'}; Max Length# Avoid having lines of code that are longer than 100 characters (including whitespace). Note: long strings are exempt from this rule, and should not be broken up. eslint: max-len Why? This ensures readability and maintainability. Copy // bad 👎 const foo = jsonData && jsonData.foo&& jsonData.foo.bar&& jsonData.foo.bar.baz&& jsonData.foo.bar.baz.quux&& jsonData.foo.bar.baz.quux.xyzzy; // bad 👎 $.ajax({ method:'POST', url:'https://airbnb.com/', data:{ name:'John'}}).done(()=>console.log('Congratulations!')).fail(()=>console.log('You have failed this city.')); // good 👍 const foo = jsonData && jsonData.foo && jsonData.foo.bar && jsonData.foo.bar.baz && jsonData.foo.bar.baz.quux && jsonData.foo.bar.baz.quux.xyzzy; // good 👍 $.ajax({ method:'POST', url:'https://airbnb.com/', data:{ name:'John'}, }) .done(()=>console.log('Congratulations!')) .fail(()=>console.log('You have failed this city.')); Block Spacing# Require consistent spacing inside an open block token and the next token on the same line. This rule also enforces consistent spacing inside a close block token and previous token on the same line. eslint: block-spacing Copy // bad 👎 functionfoo(){returntrue;} if(foo){ bar =0;} // good 👍 functionfoo(){returntrue;} if(foo){ bar =0;} Comma Spacing# Avoid spaces before commas and require a space after commas. eslint: comma-spacing Copy // bad 👎 var foo =1,bar =2; var arr =[1,2]; // good 👍 var foo =1, bar =2; var arr =[1,2]; Computed Property Spacing# Enforce spacing inside of computed property brackets. eslint: computed-property-spacing Copy // bad 👎 obj[foo ] obj['foo'] var x ={[ b ]: a} obj[foo[ bar ]] // good 👍 obj[foo] obj['foo'] var x ={[b]: a } obj[foo[bar]] Function Spacing# Avoid spaces between functions and their invocations. eslint: func-call-spacing Copy // bad 👎 func(); func (); // good 👍 func(); Key Spacing# Enforce spacing between keys and values in object literal properties. eslint: key-spacing Copy // bad 👎 var obj ={ foo :42}; var obj2 ={ foo:42}; // good 👍 var obj ={ foo:42}; Trailing Spaces# Avoid trailing spaces at the end of lines. eslint: no-trailing-spaces Multiple Empty Lines# Avoid multiple empty lines, only allow one newline at the end of files, and avoid a newline at the beginning of files. eslint: no-multiple-empty-lines Copy // bad 👎 - multiple empty lines var x =1; var y =2; // bad 👎 - 2+ newlines at end of file var x =1; var y =2; // bad 👎 - 1+ newline(s) at beginning of file var x =1; var y =2; // good 👍 var x =1; var y =2; "},{"title":"Types","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#types","content":""},{"title":"Primitives","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#primitives","content":"When you access a primitive type you work directly on its value. stringnumberbooleannullundefinedsymbolbigint Copy const foo =1; let bar = foo; bar =9; console.log(foo, bar);// => 1, 9 Symbols and BigInts cannot be faithfully polyfilled, so they should not be used when targeting browsers/environments that don't support them natively. "},{"title":"Complex:","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#complex","content":"When you access a complex type you work on a reference to its value. objectarrayfunction Copy const foo =[1,2]; const bar = foo; bar[0]=9; console.log(foo[0], bar[0]);// => 9, 9 "},{"title":"References","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#references","content":""},{"title":"Use const for all of your references:","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#use-const-for-all-of-your-references","content":"avoid using var. eslint: prefer-const, no-const-assign IMPORTANCE: This ensures that you can't reassign your references, which can lead to bugs and difficult to comprehend code. Copy // bad 👎 var a =1; var b =2; // good 👍 const a =1; const b =2; "},{"title":"Use let instead of var.","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#use-let-instead-of-var","content":"If you must reassign references, use 'let' instead of 'var'. eslint: no-var IMPORTANCE: let is block-scoped rather than function-scoped like var. Copy // bad 👎 var count =1; if(true){ count +=1; } // good 👍 , use the let. let count =1; if(true){ count +=1; } "},{"title":"Block Scoped","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#block-scoped","content":"Note that both let and const are block-scoped. Copy // const and let only exist in the blocks they are defined in. { let a =1; const b =1; } console.log(a);// ReferenceError console.log(b);// ReferenceError "},{"title":"Objects","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#objects","content":""},{"title":"No New Object","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#no-new-object","content":"Use the literal syntax for object creation. eslint: no-new-object Copy // bad 👎 const item =newObject(); // good 👍 const item ={}; "},{"title":"Computed Property Names","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#computed-property-names","content":"Use computed property names when creating objects with dynamic property names. IMPORTANCE: They allow you to define all the properties of an object in one place. Copy functiongetKey(k){ return`a key named ${k}`; } // bad 👎 const obj ={ id:5, name:'Lorem Ipsum', }; obj[getKey('enabled')]=true; // good 👍 const obj ={ id:5, name:'Lorem Ipsum', [getKey('enabled')]:true, }; "},{"title":"Object Method Shorthand","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#object-method-shorthand","content":"Use object method shorthand. eslint: object-shorthand Copy // bad 👎 const atom ={ value:1, addValue:function(value){ return atom.value+ value; }, }; // good 👍 const atom ={ value:1, addValue(value){ return atom.value+ value; }, }; "},{"title":"Property Value Shorthand","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#property-value-shorthand","content":"Use property value shorthand. eslint: object-shorthand IMPORTANCE: It is shorter and descriptive. Copy const lukeSkywalker ='Lorem Ipsum'; // bad 👎 const obj ={ lukeSkywalker: lukeSkywalker, }; // good 👍 const obj ={ lukeSkywalker, }; "},{"title":"Shorthand Property Grouping","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#shorthand-property-grouping","content":"Group your shorthand properties at the beginning of your object declaration. IMPORTANCE: It's easier to tell which properties are using the shorthand. Copy const newyorkSubway ='Newyork Subway'; const newjerseyTransit ='NewJersy Transit'; // bad 👎 const obj ={ episodeOne:1, twoJediWalkIntoACantina:2, newjerseyTransit, episodeThree:3, mayTheFourth:4, newyorkSubway, }; // good 👍 const obj ={ newjerseyTransit, newyorkSubway, episodeOne:1, twoJediWalkIntoACantina:2, episodeThree:3, mayTheFourth:4, }; "},{"title":"Quote Props","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#quote-props","content":"Only quote properties that are invalid identifiers. eslint: quote-props IMPORTANCE: In general we consider it subjectively easier to read. It improves syntax highlighting, and is also more easily optimized by many JS engines. Copy // bad 👎 const bad ={ 'foo':3, 'bar':4, 'data-blah':5, }; // good 👍 const good ={ foo:3, bar:4, 'data-blah':5, }; "},{"title":"Object.prototype Methods","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#objectprototype-methods","content":"Do not call Object.prototype methods directly, such as hasOwnProperty, propertyIsEnumerable, and isPrototypeOf. eslint: no-prototype-builtins IMPORTANCE: These methods may be shadowed by properties on the object in question - consider { hasOwnProperty: false } - or, the object may be a null object (Object.create(null)). Copy // bad 👎 console.log(object.hasOwnProperty(key)); // good 👍 console.log(Object.prototype.hasOwnProperty.call(object, key)); // best const has =Object.prototype.hasOwnProperty;// cache the lookup once, in module scope. console.log(has.call(object, key)); /* or */ import has from'has';// https://www.npmjs.com/package/has console.log(has(object, key)); "},{"title":"Object Spread Operator","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#object-spread-operator","content":"Prefer the object spread operator. over Object.assign to shallow-copy objects. Use the object rest operator to get a new object with certain properties omitted. Copy // very bad 👎👎 const original ={ a:1, b:2}; const copy =Object.assign(original,{ c:3});// this mutates `original` à² _à² delete copy.a;// so does this // bad 👎 const original ={ a:1, b:2}; const copy =Object.assign({}, original,{ c:3});// copy => { a: 1, b: 2, c: 3 } // good 👍 const original ={ a:1, b:2}; const copy ={...original, c:3};// copy => { a: 1, b: 2, c: 3 } const{ a,...noA }= copy;// noA => { b: 2, c: 3 } "},{"title":"Arrays","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#arrays","content":""},{"title":"No Array Constructor","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#no-array-constructor","content":"Use the literal syntax for array creation. eslint: no-array-constructor Copy // bad 👎 const items =newArray(); // good 👍 const items =[]; "},{"title":"Use Arraypush","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#use-arraypush","content":"Array#push instead of direct assignment to add items to an array. Copy const someStack =[]; // bad 👎 someStack[someStack.length]='abracadabra'; // good 👍 someStack.push('abracadabra'); "},{"title":"Array Spreads","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#array-spreads","content":"Use array spreads ... to copy arrays. Copy // bad 👎 const len = items.length; const itemsCopy =[]; let i; for(i =0; i < len; i +=1){ itemsCopy[i]= items[i]; } // good 👍 const itemsCopy =[...items]; Use Spreads for Iterable Object# To convert an iterable object to an array, use spreads ... instead of Array.from Array.from. Copy const foo =document.querySelectorAll('.foo'); // good 👍 const nodes =Array.from(foo); // best const nodes =[...foo]; "},{"title":"Using Array.from","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#using-arrayfrom","content":"Array.from for converting an array-like object to an array. Copy const arrLike ={0:'foo',1:'bar',2:'baz', length:3}; // bad 👎 const arr =Array.prototype.slice.call(arrLike); // good 👍 const arr =Array.from(arrLike); Mapping over Iterables# Use Array.from instead of spread ... for mapping over iterables, because it avoids creating an intermediate array. Copy // bad 👎 const baz =[...foo].map(bar); // good 👍 const baz =Array.from(foo, bar); "},{"title":"Array Callback Return","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#array-callback-return","content":"Use return statements in array method callbacks. It's ok to omit the return if the function body consists of a single statement returning an expression without side effects, following 8.2. eslint: array-callback-return Copy // good 👍 [1,2,3].map((x)=>{ const y = x +1; return x * y; }); // good 👍 [1,2,3].map((x)=> x +1); // bad 👎 - no returned value means `acc` becomes undefined after the first iteration [[0,1],[2,3],[4,5],].reduce((acc, item, index)=>{ const flatten = acc.concat(item); }); // good 👍 [[0,1],[2,3],[4,5],].reduce((acc, item, index)=>{ const flatten = acc.concat(item); return flatten; }); // bad 👎 inbox.filter((msg)=>{ const{ subject, author }= msg; if(subject ==='Mockingbird'){ return author ==='Harper Lee'; }else{ returnfalse; } }); // good 👍 inbox.filter((msg)=>{ const{ subject, author }= msg; if(subject ==='Mockingbird'){ return author ==='Harper Lee'; } returnfalse; }); "},{"title":"Line Breaks for Array Brackets","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#line-breaks-for-array-brackets","content":"Use line breaks after open and before close array brackets if an array has multiple lines Copy // bad 👎 const arr =[ [0,1],[2,3],[4,5], ]; const objectInArray =[{ id:1, },{ id:2, }]; const numberInArray =[ 1,2 ]; // good 👍 const arr =[[0,1],[2,3],[4,5]]; const objectInArray =[ { id:1, }, { id:2, }, ]; const numberInArray =[ 1, 2 ]; "},{"title":"Destructuring","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#destructuring","content":""},{"title":"Use Object Destructuring","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#use-object-destructuring","content":"Use object destructuring when accessing and using multiple properties of an object. eslint: prefer-destructuring IMPORTANCE: Destructuring saves you from creating temporary references for those properties. Copy // bad 👎 functiongetFullName(user){ const firstName = user.firstName; const lastName = user.lastName; return`${firstName}${lastName}`; } // good 👍 functiongetFullName(user){ const{ firstName, lastName }= user; return`${firstName}${lastName}`; } // best functiongetFullName({ firstName, lastName }){ return`${firstName}${lastName}`; } "},{"title":"Use Array Destructuring","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#use-array-destructuring","content":"eslint: prefer-destructuring Copy const arr =[1,2,3,4]; // bad 👎 const first = arr[0]; const second = arr[1]; // good 👍 const[first, second]= arr; "},{"title":"Multiple Return Values","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#multiple-return-values","content":"Use object destructuring for multiple return values, not array destructuring. IMPORTANCE: You can add new properties over time or change the order of things without breaking call sites. Copy // bad 👎 functionprocessInput(input){ // then a miracle occurs return[left, right, top, bottom]; } // the caller needs to think about the order of return data const[left, __, top]=processInput(input); // good 👍 functionprocessInput(input){ // then a miracle occurs return{ left, right, top, bottom }; } // the caller selects only the data they need const{ left, top }=processInput(input); "},{"title":"Strings","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#strings","content":""},{"title":"Single Quotes","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#single-quotes","content":"Use single quotes '' for strings. eslint: quotes Copy // bad 👎 const name ='Capt. Janeway'; // bad 👎 - template literals should contain interpolation or newlines const name =`Capt. Janeway`; // good 👍 const name ='Capt. Janeway'; "},{"title":"Broken Strings","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#broken-strings","content":"Strings that cause the line to go over 100 characters should not be written across multiple lines using string concatenation. IMPORTANCE: Broken strings are painful to work with and make code less searchable. Copy // bad 👎 const errorMessage ='This is a super long error that was thrown because \\ of Batman. When you stop to think about how Batman had anything to do \\ with this, you would get nowhere \\ fast.'; // bad 👎 const errorMessage ='This is a super long error that was thrown because '+ 'of Batman. When you stop to think about how Batman had anything to do '+ 'with this, you would get nowhere fast.'; // good 👍 const errorMessage = 'This is a super long error that was thrown because of Batman. When you stop to think about how Batman had anything to do with this, you would get nowhere fast.'; "},{"title":"Prefer Template Strings","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#prefer-template-strings","content":"When programmatically building up strings, use template strings instead of concatenation. eslint: prefer-templatetemplate-curly-spacing IMPORTANCE: Template strings give you a readable, concise syntax with proper newlines and string interpolation features. Copy // bad 👎 functionsayHi(name){ return'How are you, '+ name +'?'; } // bad 👎 functionsayHi(name){ return['How are you, ', name,'?'].join(); } // bad 👎 functionsayHi(name){ return`How are you, ${name}?`; } // good 👍 functionsayHi(name){ return`How are you, ${name}?`; } "},{"title":"No Eval","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#no-eval","content":"Never use eval() on a string, it opens too many vulnerabilities. eslint: no-eval "},{"title":"No Useless Escapes","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#no-useless-escapes","content":"Do not unnecessarily escape characters in strings. eslint: no-useless-escape IMPORTANCE: Backslashes harm readability, thus they should only be present when necessary. Copy // bad 👎 const foo =''this' is \\'quoted\\''; // good 👍 const foo =''this' is \\'quoted\\''; const foo =`my name is '${name}'`; "},{"title":"Functions","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#functions","content":""},{"title":"Function Style","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#function-style","content":"Use named function expressions instead of function declarations. eslint: func-style IMPORTANCE: Function declarations are hoisted, which means that it's easy - too easy - to reference the function before it is defined in the file. This harms readability and maintainability. Copy // bad 👎 functionfoo(){ // ... } // bad 👎 constfoo=function(){ // ... }; // good 👍 // lexical name distinguished from the variable-referenced invocation(s) constshort=functionlongUniqueMoreDescriptiveLexicalFoo(){ // ... }; "},{"title":"Wrap Immediately Invoked Functions","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#wrap-immediately-invoked-functions","content":"Wrap immediately invoked function expressions in parentheses. eslint: wrap-iife IMPORTANCE: An immediately invoked function expression is a single unit - wrapping both it, and its invocation parens, in parens, cleanly expresses this. Note that in a world with modules everywhere, you almost never need an IIFE. Copy // immediately-invoked function expression (IIFE) (function(){ console.log('Welcome to the Internet. Please follow me.'); })(); "},{"title":"No Loop Functions","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#no-loop-functions","content":"Never declare a function in a non-function block (if, while, etc). Assign the function to a variable instead. eslint: no-loop-func "},{"title":"A function declaration is not a statement.","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#a-function-declaration-is-not-a-statement","content":"Copy // bad 👎 if(currentUser){ functiontest(){ console.log('Nope.'); } } // good 👍 let test; if(currentUser){ test=()=>{ console.log('Yup.'); }; } "},{"title":"Parameters and Arguments","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#parameters-and-arguments","content":"arguments# Never name a parameter arguments. This will take precedence over the arguments object that is given to every function scope. Copy // bad 👎 functionfoo(name, options, arguments){ // ... } // good 👍 functionfoo(name, options, args){ // ... } Prefer Rest Params# Never use arguments, opt to use rest syntax ... instead. eslint: prefer-rest-params IMPORTANCE: ... is explicit about which arguments you want pulled. Copy // bad 👎 functionconcatenateAll(){ const args =Array.prototype.slice.call(arguments); return args.join(''); } // good 👍 functionconcatenateAll(...args){ return args.join(''); } Default Parameter Syntax# Use default parameter syntax rather than mutating function arguments. Copy // really bad functionhandleThings(opts){ // No! We shouldn't mutate function arguments. // Double bad: if opts is falsy it'll be set to an object which may // be what you want but it can introduce subtle bugs. opts = opts ||{}; // ... } // still bad functionhandleThings(opts){ if(opts ===void0){ opts ={}; } // ... } // good 👍 functionhandleThings(opts ={}){ // ... } Parameter Side Effects# Avoid side effects with default parameters. IMPORTANCE: They are confusing to reason about. Copy var b =1; // bad 👎 functioncount(a = b++){ console.log(a); } count();// 1 count();// 2 count(3);// 3 count();// 3 Default Parameters Last# Always put default parameters last. Copy // bad 👎 functionhandleThings(opts ={}, name){ // ... } // good 👍 functionhandleThings(name, opts ={}){ // ... } Never Mutate Parameters.# eslint: no-param-reassign IMPORTANCE: Manipulating objects passed in as parameters can cause unwanted variable side effects in the original caller. Copy // bad 👎 functionf1(obj){ obj.key=1; } // good 👍 functionf2(obj){ const key =Object.prototype.hasOwnProperty.call(obj,'key')? obj.key:1; } Never Reassign Parameters.# eslint: no-param-reassign IMPORTANCE: Reassigning parameters can lead to unexpected behavior, especially when accessing the arguments object. It can also cause optimization issues, especially in V8. Copy // bad 👎 functionf1(a){ a =1; // ... } functionf2(a){ if(!a){ a =1;} // ... } // good 👍 functionf3(a){ const b = a ||1; // ... } functionf4(a =1){ // ... } "},{"title":"No New Function","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#no-new-function","content":"Never use the Function constructor to create a new function. eslint: no-new-func IMPORTANCE: Creating a function in this way evaluates a string similarly to eval(), which opens vulnerabilities. Copy // bad 👎 var add =newFunction('a','b','return a + b'); // still bad var subtract =Function('a','b','return a - b'); "},{"title":"Function Spacing","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#function-spacing-1","content":"Spacing in a function signature. eslint: space-before-function-parenspace-before-blocks IMPORTANCE: Consistency is good, and you shouldn't have to add or remove a space when adding or removing a name. Copy // bad 👎 constf=function(){}; constg=function(){}; consth=function(){}; // good 👍 constx=function(){}; consty=functiona(){}; "},{"title":"Prefer Spread","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#prefer-spread","content":"Prefer the use of the spread operator ... to call variadic functions. eslint: prefer-spread IMPORTANCE: It's cleaner, you don't need to supply a context, and you can not easily compose new with apply. Copy // bad 👎 const x =[1,2,3,4,5]; console.log.apply(console, x); // good 👍 const x =[1,2,3,4,5]; console.log(...x); // bad 👎 new(Function.prototype.bind.apply(Date,[null,2016,8,5]))(); // good 👍 newDate(...[2016,8,5]); "},{"title":"Function Parentheses Newline","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#function-parentheses-newline","content":"Functions with multiline signatures, or invocations, should be indented just like every other multiline. eslint: function-paren-newline Copy // bad 👎 functionfoo(bar, baz, quux){ // ... } // good 👍 functionfoo( bar, baz, quux, ){ // ... } // bad 👎 console.log(foo, bar, baz); // good 👍 console.log( foo, bar, baz, ); "},{"title":"Arrow Functions","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#arrow-functions","content":""},{"title":"Prefer Arrow Callback","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#prefer-arrow-callback","content":"When you must use an anonymous function (as when passing an inline callback), use arrow function notation. eslint: prefer-arrow-callback, arrow-spacing IMPORTANCE: It creates a version of the function that executes in the context of this, which is usually what you want, and is a more concise syntax. Why not? If you have a fairly complicated function, you might move that logic out into its own named function expression. Copy // bad 👎 [1,2,3].map(function(x){ const y = x +1; return x * y; }); // good 👍 [1,2,3].map((x)=>{ const y = x +1; return x * y; }); "},{"title":"Arrow Styling","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#arrow-styling","content":"If the function body consists of a single statement, omit the braces and use the implicit return. Otherwise, keep the braces and use a return statement. eslint: arrow-parens, arrow-body-style IMPORTANCE: It reads well when multiple functions are chained together. Copy // bad 👎 [1,2,3].map((number)=>{ const nextNumber = number +1; `A string containing the ${nextNumber}.`; }); // good 👍 [1,2,3].map((number)=>`A string containing the ${number +1}.`); // good 👍 [1,2,3].map((number)=>{ const nextNumber = number +1; return`A string containing the ${nextNumber}.`; }); // good 👍 [1,2,3].map((number, index)=>({ [index]: number, })); // No implicit return with side effects functionfoo(callback){ const val =callback(); if(val ===true){ // Do something if callback returns true } } let bool =false; // bad 👎 foo(()=>(bool =true)); // good 👍 foo(()=>{ bool =true; }); "},{"title":"Arrow Readability","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#arrow-readability","content":"In case the expression spans over multiple lines, wrap it in parentheses for better readability. IMPORTANCE: It shows clearly where the function starts and ends. Copy // bad 👎 ['get','post','put'].map((httpMethod)=>Object.prototype.hasOwnProperty.call( httpMagicObjectWithAVeryLongName, httpMethod ) ); // good 👍 ['get','post','put'].map((httpMethod)=> Object.prototype.hasOwnProperty.call( httpMagicObjectWithAVeryLongName, httpMethod ) ); "},{"title":"Arrow Parentheses","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#arrow-parentheses","content":"Always include parentheses around arguments for clarity and consistency. eslint: arrow-parens IMPORTANCE: Minimizes diff churn when adding or removing arguments. Copy // bad 👎 [1,2,3].map(x=> x * x); // good 👍 [1,2,3].map((x)=> x * x); // bad 👎 [1,2,3].map(number=>( `A long string with the ${number}. It's so long that we don't want it to take up space on the .map line!` )); // good 👍 [1,2,3].map((number)=>( `A long string with the ${number}. It's so long that we don't want it to take up space on the .map line!` )); // bad 👎 [1,2,3].map(x=>{ const y = x +1; return x * y; }); // good 👍 [1,2,3].map((x)=>{ const y = x +1; return x * y; }); "},{"title":"No Confusing Arrow","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#no-confusing-arrow","content":"Avoid confusing arrow function syntax (=>) with comparison operators (<=, >=). eslint: no-confusing-arrow Copy // bad 👎 constitemHeight=(item)=> item.height<=256? item.largeSize: item.smallSize; // bad 👎 constitemHeight=(item)=> item.height>=256? item.largeSize: item.smallSize; // good 👍 constitemHeight=(item)=>(item.height<=256? item.largeSize: item.smallSize); // good 👍 constitemHeight=(item)=>{ const{ height, largeSize, smallSize }= item; return height <=256? largeSize : smallSize; }; "},{"title":"Implicit Arrow Linebreak","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#implicit-arrow-linebreak","content":"Enforce the location of arrow function bodies with implicit returns. eslint: implicit-arrow-linebreak Copy // bad 👎 (foo)=> bar; (foo)=> (bar); // good 👍 (foo)=> bar; (foo)=>(bar); (foo)=>( bar ) "},{"title":"Classes & Constructors","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#classes--constructors","content":""},{"title":"Class","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#class","content":"Always use class. IMPORTANCE: class syntax is more concise and easier to reason about. Copy // bad 👎 functionQueue(contents =[]){ this.queue=[...contents]; } Queue.prototype.pop=function(){ const value =this.queue[0]; this.queue.splice(0,1); return value; }; // good 👍 classQueue{ constructor(contents =[]){ this.queue=[...contents]; } pop(){ const value =this.queue[0]; this.queue.splice(0,1); return value; } } "},{"title":"Extends","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#extends","content":"Use extends for inheritance. IMPORTANCE: It is a built-in way to inherit prototype functionality without breaking instanceof. Copy // bad 👎 const inherits =require('inherits'); functionPeekableQueue(contents){ Queue.apply(this, contents); } inherits(PeekableQueue,Queue); PeekableQueue.prototype.peek=function(){ returnthis.queue[0]; }; // good 👍 classPeekableQueueextendsQueue{ peek(){ returnthis.queue[0]; } } "},{"title":"Method Chaining","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#method-chaining","content":"Methods can return this to help with method chaining. Copy // bad 👎 Jedi.prototype.jump=function(){ this.jumping=true; returntrue; }; Jedi.prototype.setHeight=function(height){ this.height= height; }; const luke =newJedi(); luke.jump();// => true luke.setHeight(20);// => undefined // good 👍 classJedi{ jump(){ this.jumping=true; returnthis; } setHeight(height){ this.height= height; returnthis; } } const luke =newJedi(); luke.jump() .setHeight(20); "},{"title":"toString()","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#tostring","content":"It’s okay to write a custom toString() method, just make sure it works successfully and causes no side effects. Copy classJedi{ constructor(options ={}){ this.name= options.name||'no name'; } getName(){ returnthis.name; } toString(){ return`Jedi - ${this.getName()}`; } } "},{"title":"No Useless Constructor","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#no-useless-constructor","content":"Classes have a default constructor if one is not specified. An empty constructor function or one that just delegates to a parent class is unnecessary. eslint: no-useless-constructor Copy // bad 👎 classJedi{ constructor(){} getName(){ returnthis.name; } } // bad 👎 classReyextendsJedi{ constructor(...args){ super(...args); } } // good 👍 classReyextendsJedi{ constructor(...args){ super(...args); this.name='Rey'; } } "},{"title":"No Duplicate Class Members","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#no-duplicate-class-members","content":"Avoid duplicate class members. eslint: no-dupe-class-members IMPORTANCE: Duplicate class member declarations will silently prefer the last one - having duplicates is almost certainly a bug. Copy // bad 👎 classFoo{ bar(){return1;} bar(){return2;} } // good 👍 classFoo{ bar(){return1;} } // good 👍 classFoo{ bar(){return2;} } "},{"title":"Class Methods Use this","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#class-methods-use-this","content":"Class methods should use this or be made into a static method unless an external library or framework requires to use specific non-static methods. Being an instance method should indicate that it behaves differently based on properties of the receiver. eslint: class-methods-use-this Copy // bad 👎 classFoo{ bar(){ console.log('bar'); } } // good 👍 - this is used classFoo{ bar(){ console.log(this.bar); } } // good 👍 - constructor is exempt classFoo{ constructor(){ // ... } } // good 👍 - static methods aren't expected to use this classFoo{ staticbar(){ console.log('bar'); } } "},{"title":"Modules","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#modules","content":""},{"title":"Import/Export","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#importexport","content":"Always use modules (import/export) over a non-standard module system. You can always transpile to your preferred module system. Why? Modules are the future, let’s start using the future now. Copy // bad 👎 constAirbnbStyleGuide=require('./AirbnbStyleGuide'); module.exports=AirbnbStyleGuide.es6; // ok importAirbnbStyleGuidefrom'./AirbnbStyleGuide'; exportdefaultAirbnbStyleGuide.es6; // best import{ es6 }from'./AirbnbStyleGuide'; exportdefault es6; "},{"title":"Wildcards","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#wildcards","content":"Do not use wildcard imports. Why? This makes sure you have a single default export. Copy // bad 👎 import*asAirbnbStyleGuidefrom'./AirbnbStyleGuide'; // good 👍 importAirbnbStyleGuidefrom'./AirbnbStyleGuide'; "},{"title":"Export From Import","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#export-from-import","content":"And do not export directly from an import. Why? Although the one-liner is concise, having one clear way to import and one clear way to export makes things consistent. Copy // bad 👎 // filename es6.js export{ es6 asdefault}from'./AirbnbStyleGuide'; // good 👍 // filename es6.js import{ es6 }from'./AirbnbStyleGuide'; exportdefault es6; "},{"title":"No Duplicate Imports","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#no-duplicate-imports","content":"Only import from a path in one place. eslint: no-duplicate-imports Why? Having multiple lines that import from the same path can make code harder to maintain. Copy // bad 👎 import foo from'foo'; // … some other imports … // import{ named1, named2 }from'foo'; // good 👍 import foo,{ named1, named2 }from'foo'; // good 👍 import foo,{ named1, named2, }from'foo'; "},{"title":"Do Not Export Mutable Bindings.","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#do-not-export-mutable-bindings","content":"eslint: import/no-mutable-exports Why? Mutation should be avoided in general, but in particular when exporting mutable bindings. While this technique may be needed for some special cases, in general, only constant references should be exported. Copy // bad 👎 let foo =3; export{ foo }; // good 👍 const foo =3; export{ foo }; "},{"title":"Prefer Default Export","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#prefer-default-export","content":"In modules with a single export, prefer default export over named export. eslint: import/prefer-default-export Why? To encourage more files that only ever export one thing, which is better for readability and maintainability. Copy // bad 👎 exportfunctionfoo(){} // good 👍 exportdefaultfunctionfoo(){} Put all imports above non-import statements. eslint: import/first Why? Since imports are hoisted, keeping them all at the top prevents surprising behavior. Copy // bad 👎 import foo from'foo'; foo.init(); import bar from'bar'; // good 👍 import foo from'foo'; import bar from'bar'; foo.init(); "},{"title":"Object Curly Newline","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#object-curly-newline","content":"Multiline imports should be indented just like multiline array and object literals. eslint: object-curly-newline Why? The curly braces follow the same indentation rules as every other curly brace block in the style guide, as do the trailing commas. Copy // bad 👎 import{longNameA, longNameB, longNameC, longNameD, longNameE}from'path'; // good 👍 import{ longNameA, longNameB, longNameC, longNameD, longNameE, }from'path'; "},{"title":"No webpack Loader Syntax","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#no-webpack-loader-syntax","content":"Disallow Webpack loader syntax in module import statements. eslint: import/no-webpack-loader-syntax Why? Since using Webpack syntax in the imports couples the code to a module bundler. Prefer using the loader syntax in webpack.config.js. Copy // bad 👎 import fooSass from'css!sass!foo.scss'; import barCss from'style!css!bar.css'; // good 👍 import fooSass from'foo.scss'; import barCss from'bar.css'; "},{"title":"No JS Filename Extensions","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#no-js-filename-extensions","content":"Do not include JavaScript filename extensions eslint: import/extensions Why? Including extensions inhibits refactoring, and inappropriately hardcodes implementation details of the module you're importing in every consumer. Copy // bad 👎 import foo from'./foo.js'; import bar from'./bar.jsx'; import baz from'./baz/index.jsx'; // good 👍 import foo from'./foo'; import bar from'./bar'; import baz from'./baz'; "},{"title":"Iterators and Generators","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#iterators-and-generators","content":""},{"title":"Iterators","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#iterators","content":"Don't Use Iterators. Prefer JavaScript's higher-order functions instead of loops like for-in or for-of. eslint: no-iteratorno-restricted-syntax IMPORTANCE: This enforces our immutable rule. Dealing with pure functions that return values is easier to reason about than side effects. Use map() / every() / filter() / find() / findIndex() / reduce() / some() / ... to iterate over arrays, and Object.keys() / Object.values() / Object.entries() to produce arrays so you can iterate over objects. Copy const numbers =[1,2,3,4,5]; // bad 👎 let sum =0; for(let num of numbers){ sum += num; } sum ===15; // good 👍 let sum =0; numbers.forEach((num)=>{ sum += num; }); sum ===15; // best (use the functional force) const sum = numbers.reduce((total, num)=> total + num,0); sum ===15; // bad 👎 const increasedByOne =[]; for(let i =0; i < numbers.length; i++){ increasedByOne.push(numbers[i]+1); } // good 👍 const increasedByOne =[]; numbers.forEach((num)=>{ increasedByOne.push(num +1); }); // best (keeping it functional) const increasedByOne = numbers.map((num)=> num +1); "},{"title":"Generators","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#generators","content":"Don’t Use Generators For Now Why? They don’t transpile well to ES5. Generator Spacing# If you must use generators, or if you disregard our advice, make sure their function signature is spaced properly. eslint: generator-star-spacing Why? function and * are part of the same conceptual keyword - * is not a modifier for function, function* is a unique construct, different from function. Copy // bad 👎 function*foo(){ // ... } // bad 👎 constbar=function*(){ // ... }; // bad 👎 constbaz=function*(){ // ... }; // bad 👎 constquux=function*(){ // ... }; // bad 👎 function*foo(){ // ... } // bad 👎 function*foo(){ // ... } // very bad function * foo(){ // ... } // very bad constwat=function * (){ // ... }; // good 👍 function*foo(){ // ... } // good 👍 constfoo=function*(){ // ... }; "},{"title":"Properties","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#properties","content":""},{"title":"Dot Notation","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#dot-notation","content":"Use dot notation when accessing properties. eslint: dot-notation Copy const luke ={ jedi:true, age:28, }; // bad 👎 const isJedi = luke['jedi']; // good 👍 const isJedi = luke.jedi; "},{"title":"Bracket Notation","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#bracket-notation","content":"Use bracket notation [] when accessing properties with a variable. Copy const luke ={ jedi:true, age:28, }; functiongetProp(prop){ return luke[prop]; } const isJedi =getProp('jedi'); "},{"title":"No Restricted Properties","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#no-restricted-properties","content":"Use exponentiation operator ** when calculating exponentiations. eslint: no-restricted-properties. Copy // bad 👎 const binary =Math.pow(2,10); // good 👍 const binary =2**10; "},{"title":"Variables","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#variables","content":""},{"title":"Use const and let","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#use-const-and-let","content":"Always use const or let to declare variables. 'var' is a global variables. We want to avoid using the global namespace. eslint: no-undefprefer-const Copy // bad 👎 superPower =newSuperPower(); // good 👍 const superPower =newSuperPower(); "},{"title":"One Variable","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#one-variable","content":"Use one const or let declaration per variable or assignment. eslint: one-var IMPORTANCE: It's easier to add new variable declarations this way, and you never have to worry about swapping out a ; for a , or introducing punctuation-only diffs. You can also step through each declaration with the debugger, instead of jumping through all of them at once. Copy // bad 👎 const items =getItems(), goSportsTeam =true, dragonball ='z'; // bad 👎 // (compare to above, and try to spot the mistake) const items =getItems(), goSportsTeam =true; dragonball ='z'; // good 👍 const items =getItems(); const goSportsTeam =true; const dragonball ='z'; "},{"title":"Grouping Variables","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#grouping-variables","content":"Group all your const and then group all your let. This is helpful when later on you might need to assign a variable depending on one of the previous assigned variables. Copy // bad 👎 let i, len, dragonball, items =getItems(), goSportsTeam =true; // bad 👎 let i; const items =getItems(); let dragonball; const goSportsTeam =true; let len; // good 👍 const goSportsTeam =true; const items =getItems(); let dragonball; let i; let length; "},{"title":"Reasonably Placed Variables","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#reasonably-placed-variables","content":"Assign variables where you need them, but place them in a reasonable place. let and const are block scoped and not function scoped. Copy // bad 👎 - unnecessary function call functioncheckName(hasName){ const name =getName(); if(hasName ==='test'){ returnfalse; } if(name ==='test'){ this.setName(''); returnfalse; } return name; } // good 👍 functioncheckName(hasName){ if(hasName ==='test'){ returnfalse; } const name =getName(); if(name ==='test'){ this.setName(''); returnfalse; } return name; } "},{"title":"No Multi Assign","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#no-multi-assign","content":"Don't chain variable assignments. eslint: no-multi-assign Why? Chaining variable assignments creates implicit global variables. Copy // bad 👎 (functionexample(){ // JavaScript interprets this as // let a = ( b = ( c = 1 ) ); // The let keyword only applies to variable a; variables b and c become // global variables. let a =(b = c =1); }()); console.log(a);// throws ReferenceError console.log(b);// 1 console.log(c);// 1 // good 👍 (functionexample(){ let a =1; let b = a; let c = a; }()); console.log(a);// throws ReferenceError console.log(b);// throws ReferenceError console.log(c);// throws ReferenceError // the same applies for `const` "},{"title":"No Unary Increments","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#no-unary-increments","content":"Avoid using unary increments and decrements (++, --). eslint no-plusplus Why? Per the eslint documentation, unary increment and decrement statements are subject to automatic semicolon insertion and can cause silent errors with incrementing or decrementing values within an application. It is also more expressive to mutate your values with statements like num += 1 instead of num++ or num ++. Disallowing unary increment and decrement statements also prevents you from pre-incrementing/pre-decrementing values unintentionally which can also cause unexpected behavior in your programs. Copy // bad 👎 const array =[1,2,3]; let num =1; num++; --num; let sum =0; let truthyCount =0; for(let i =0; i < array.length; i++){ let value = array[i]; sum += value; if(value){ truthyCount++; } } // good 👍 const array =[1,2,3]; let num =1; num +=1; num -=1; const sum = array.reduce((a, b)=> a + b,0); const truthyCount = array.filter(Boolean).length; "},{"title":"Operator Linebreak","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#operator-linebreak","content":"Avoid linebreaks before or after = in an assignment. If your assignment violates max-len, surround the value in parens. eslint operator-linebreak. Linebreaks surrounding = can obfuscate the value of an assignment. Copy // bad 👎 const foo = superLongLongLongLongLongLongLongLongFunctionName(); // bad 👎 const foo ='superLongLongLongLongLongLongLongLongString'; // good 👍 const foo =( superLongLongLongLongLongLongLongLongFunctionName(); ); // good 👍 const foo ='superLongLongLongLongLongLongLongLongString'; "},{"title":"No Unused Variables","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#no-unused-variables","content":"Disallow unused variables. eslint: no-unused-vars Why? Variables that are declared and not used anywhere in the code are most likely an error due to incomplete refactoring. Such variables take up space in the code and can lead to confusion by readers. Copy // bad 👎 var some_unused_var =42; // Write-only variables are not considered as used. var y =10; y =5; // A read for a modification of itself is not considered as used. var z =0; z = z +1; // Unused function arguments. functiongetX(x, y){ return x; } // good 👍 functiongetXPlusY(x, y){ return x + y; } var x =1; var y = a +2; alert(getXPlusY(x, y)); // 'type' is ignored even if unused because it has a rest property sibling. // This is a form of extracting an object that omits the specified keys. var{ type,...coords }= data; // 'coords' is now the 'data' object without its 'type' property. "},{"title":"Object / Array creation","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#object--array-creation","content":"Use trailing commas and put short declarations on a single line. Copy // bad 👎 var a =[ 'hello','world' ]; var b ={'good':'code' , is generally:'pretty' }; // good 👍 var a =['hello','world']; var b ={ good:'code', 'is generally':'pretty', }; "},{"title":"Hoisting","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#hoisting","content":""},{"title":"var","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#var","content":"var declarations get hoisted to the top of their closest enclosing function scope, their assignment does not. const and let declarations are blessed with a new concept called Temporal Dead Zones (TDZ). It’s important to know why typeof is no longer safe. Copy // we know this wouldn’t work (assuming there // is no notDefined global variable) functionexample(){ console.log(notDefined);// => throws a ReferenceError } // creating a variable declaration after you // reference the variable will work due to // variable hoisting. Note: the assignment // value of `true` is not hoisted. functionexample(){ console.log(declaredButNotAssigned);// => undefined var declaredButNotAssigned =true; } // the interpreter is hoisting the variable // declaration to the top of the scope, // which means our example could be rewritten as: functionexample(){ let declaredButNotAssigned; console.log(declaredButNotAssigned);// => undefined declaredButNotAssigned =true; } // using const and let functionexample(){ console.log(declaredButNotAssigned);// => throws a ReferenceError console.log(typeof declaredButNotAssigned);// => throws a ReferenceError const declaredButNotAssigned =true; } "},{"title":"Anonymous Function Expressions","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#anonymous-function-expressions","content":"Anonymous function expressions hoist their variable name, but not the function assignment. Copy functionexample(){ console.log(anonymous);// => undefined anonymous();// => TypeError anonymous is not a function varanonymous=function(){ console.log('anonymous function expression'); }; } "},{"title":"Named Function Expressions","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#named-function-expressions","content":"Named function expressions hoist the variable name, not the function name or the function body. Copy functionexample(){ console.log(named);// => undefined named();// => TypeError named is not a function superPower();// => ReferenceError superPower is not defined varnamed=functionsuperPower(){ console.log('Flying'); }; } // the same is true when the function name // is the same as the variable name. functionexample(){ console.log(named);// => undefined named();// => TypeError named is not a function varnamed=functionnamed(){ console.log('named'); }; } "},{"title":"Function Declarations","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#function-declarations","content":"Function declarations hoist their name and the function body. Copy functionexample(){ superPower();// => Flying functionsuperPower(){ console.log('Flying'); } } For more information refer to JavaScript Scoping & Hoisting by Ben Cherry. "},{"title":"Comparison Operators & Equality","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#comparison-operators--equality","content":""},{"title":"Equals","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#equals","content":"Must use === and !== over == and !=. eslint: eqeqeq "},{"title":"if","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#if","content":"Conditional statements such as the if statement evaluate their expression using coercion with the ToBoolean abstract method and always follow these simple rules: Objects evaluate to trueUndefined evaluates to falseNull evaluates to falseBooleans evaluate to the value of the booleanNumbers evaluate to false if +0, -0, or NaN, otherwise trueStrings evaluate to false if an empty string '', otherwise true Copy if([0]&&[]){ // true // an array (even an empty one) is an object, objects will evaluate to true } "},{"title":"Booleans, Strings and Numbers","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#booleans-strings-and-numbers","content":"Use shortcuts for booleans, but explicit comparisons for strings and numbers. Copy // bad 👎 if(isValid ===true){ // ... } // good 👍 if(isValid){ // ... } // bad 👎 if(name){ // ... } // good 👍 if(name !==''){ // ... } // bad 👎 if(collection.length){ // ... } // good 👍 if(collection.length>0){ // ... } "},{"title":"More Info","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#more-info","content":"For more information see Truth Equality and JavaScript by Angus Croll. "},{"title":"No Case Declarations","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#no-case-declarations","content":"Use braces to create blocks in case and default clauses that contain lexical declarations (e.g. let, const, function, and class). eslint: no-case-declarations Why? Lexical declarations are visible in the entire switch block but only get initialized when assigned, which only happens when its case is reached. This causes problems when multiple case clauses attempt to define the same thing. Copy // bad 👎 switch(foo){ case1: let x =1; break; case2: const y =2; break; case3: functionf(){ // ... } break; default: classC{} } // good 👍 switch(foo){ case1:{ let x =1; break; } case2:{ const y =2; break; } case3:{ functionf(){ // ... } break; } case4: bar(); break; default:{ classC{} } } "},{"title":"Ternaries","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#ternaries","content":"Ternaries should not be nested and generally be single line expressions. eslint: no-nested-ternary Copy // bad 👎 const foo = maybe1 > maybe2 ?'bar' : value1 > value2 ?'baz':null; // split into 2 separated ternary expressions const maybeNull = value1 > value2 ?'baz':null; // better const foo = maybe1 > maybe2 ?'bar' : maybeNull; // best const foo = maybe1 > maybe2 ?'bar': maybeNull; Unnecessary Ternaries# Avoid unneeded ternary statements. eslint: no-unneeded-ternary Copy // bad 👎 const foo = a ? a : b; const bar = c ?true:false; const baz = c ?false:true; // good 👍 const foo = a || b; const bar =!!c; const baz =!c; "},{"title":"Mixing Operators","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#mixing-operators","content":"When mixing operators, enclose them in parentheses. The only exception is the standard arithmetic operators: +, -, and ** since their precedence is broadly understood. We recommend enclosing / and * in parentheses because their precedence can be ambiguous when they are mixed. eslint: no-mixed-operators IMPORTANCE: This improves readability and clarifies the developer's intention. Copy // bad 👎 const foo = a && b <0|| c >0|| d +1===0; // bad 👎 const bar = a ** b -5% d; // bad 👎 // one may be confused into thinking (a || b) && c if(a || b && c){ return d; } // bad 👎 const bar = a + b / c * d; // good 👍 const foo =(a && b <0)|| c >0||(d +1===0); // good 👍 const bar = a ** b -(5% d); // good 👍 if(a ||(b && c)){ return d; } // good 👍 const bar = a +(b / c)* d; "},{"title":"Blocks","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#blocks","content":""},{"title":"Multiline Blocks","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#multiline-blocks","content":"Use braces with all multiline blocks. eslint: nonblock-statement-body-position Copy // bad 👎 if(test) returnfalse; // good 👍 if(test)returnfalse; // good 👍 if(test){ returnfalse; } // bad 👎 functionfoo(){returnfalse;} // good 👍 functionbar(){ returnfalse; } "},{"title":"Brace Style","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#brace-style","content":"If you're using multiline blocks with if and else, put else on the same line. as your if block's closing brace. eslint: brace-style Copy // bad 👎 if(test){ thing1(); thing2(); }else{ thing3(); } // good 👍 if(test){ thing1(); thing2(); }else{ thing3(); } "},{"title":"No Else Return","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#no-else-return","content":"If an if block always executes a return statement, the subsequent else block is unnecessary. A return in an else if block following an if block that contains a return can be separated into multiple if blocks. eslint: no-else-return Copy // bad 👎 functionfoo(){ if(x){ return x; }else{ return y; } } // bad 👎 functioncats(){ if(x){ return x; }elseif(y){ return y; } } // bad 👎 functiondogs(){ if(x){ return x; }else{ if(y){ return y; } } } // good 👍 functionfoo(){ if(x){ return x; } return y; } // good 👍 functioncats(){ if(x){ return x; } if(y){ return y; } } // good 👍 functiondogs(x){ if(x){ if(z){ return y; } }else{ return z; } } "},{"title":"Control Statements","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#control-statements","content":""},{"title":"New Line Condition","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#new-line-condition","content":"In case your control statement (if, while etc.) gets too long or exceeds the maximum line length, each (grouped) condition could be put into a new line. The logical operator should begin the line. IMPORTANCE: This also improves readability by making it easier to visually follow complex logic. Copy // bad 👎 if((foo ===123|| bar ==='abc')&&doesItLookGoodWhenItBecomesThatLong()&&isThisReallyHappening()){ thing1(); } // bad 👎 if(foo ===123&& bar ==='abc'){ thing1(); } // bad 👎 if(foo ===123 && bar ==='abc'){ thing1(); } // bad 👎 if( foo ===123&& bar ==='abc' ){ thing1(); } // good 👍 if( foo ===123 && bar ==='abc' ){ thing1(); } // good 👍 if( (foo ===123|| bar ==='abc') &&doesItLookGoodWhenItBecomesThatLong() &&isThisReallyHappening() ){ thing1(); } // good 👍 if(foo ===123&& bar ==='abc'){ thing1(); } "},{"title":"Selection Operators","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#selection-operators","content":"Don't use selection operators in place of control statements. Copy // bad 👎 !isRunning &&startRunning(); // good 👍 if(!isRunning){ startRunning(); } "},{"title":"Comments","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#comments","content":""},{"title":"Multiline Comments","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#multiline-comments","content":"Use /** ... */ for multiline comments. Copy // bad 👎 // make() returns a new element // based on the passed in tag name // // @param {String} tag // @return {Element} element functionmake(tag){ // ... return element; } // good 👍 /** * make() returns a new element * based on the passed-in tag name */ functionmake(tag){ // ... return element; } "},{"title":"Single Line Comments","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#single-line-comments","content":"Use // for single line comments. Place single line comments on a newline above the subject of the comment. Put an empty line before the comment unless it's on the first line of a block. Copy // bad 👎 const active =true;// is current tab // good 👍 // is current tab const active =true; // bad 👎 functiongetType(){ console.log('fetching type...'); // set the default type to 'no type' const type =this.type||'no type'; return type; } // good 👍 functiongetType(){ console.log('fetching type...'); // set the default type to 'no type' const type =this.type||'no type'; return type; } // also good functiongetType(){ // set the default type to 'no type' const type =this.type||'no type'; return type; } "},{"title":"Spaced Comment","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#spaced-comment","content":"Start all comments with a space to make it easier to read. eslint: spaced-comment Copy // bad 👎 //is current tab const active =true; // good 👍 // is current tab const active =true; // bad 👎 /** *make() returns a new element *based on the passed-in tag name */ functionmake(tag){ // ... return element; } // good 👍 /** * make() returns a new element * based on the passed-in tag name */ functionmake(tag){ // ... return element; } "},{"title":"FIXME or TODO","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#fixme-or-todo","content":"Prefixing your comments with FIXME or TODO helps other developers quickly understand. Use // FIXME: to annotate problems.# Copy classCalculatorextendsAbacus{ constructor(){ super(); // FIXME: shouldn't use a global here total =0; } } Use // TODO: to annotate solutions to problems.# Copy classCalculatorextendsAbacus{ constructor(){ super(); // TODO: total should be configurable by an options param this.total=0; } } "},{"title":"Commas","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#commas","content":""},{"title":"Leading commas: Nope.","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#leading-commas-nope","content":"eslint: comma-style Copy // bad 👎 const story =[ once , upon , aTime ]; // good 👍 const story =[ once, upon, aTime, ]; // bad 👎 const hero ={ firstName:'Ada' , lastName:'Lovelace' , birthYear:1815 , superPower:'computers' }; // good 👍 const hero ={ firstName:'Ada', lastName:'Lovelace', birthYear:1815, superPower:'computers', }; "},{"title":"Additional trailing comma: Yup.","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#additional-trailing-comma-yup","content":"eslint: comma-dangle Why? This leads to cleaner git diffs. Also, transpilers like Babel will remove the additional trailing comma in the transpiled code which means you don’t have to worry about the trailing comma problem in legacy browsers. Copy // bad 👎 - git diff without trailing comma const hero = { firstName: 'Florence', - lastName: 'Nightingale' + lastName: 'Nightingale', + inventorOf: ['coxcomb chart', 'modern nursing'] }; // good 👍 - git diff with trailing comma const hero = { firstName: 'Florence', lastName: 'Nightingale', + inventorOf: ['coxcomb chart', 'modern nursing'], }; Copy // bad 👎 const hero ={ firstName:'Dana', lastName:'Scully' }; const heroes =[ 'Batman', 'Superman' ]; // good 👍 const hero ={ firstName:'Dana', lastName:'Scully', }; const heroes =[ 'Batman', 'Superman', ]; // bad 👎 functioncreateHero( firstName, lastName, inventorOf ){ // does nothing } // good 👍 functioncreateHero( firstName, lastName, inventorOf, ){ // does nothing } // good 👍 (note that a comma must not appear after a \"rest\" element) functioncreateHero( firstName, lastName, inventorOf, ...heroArgs ){ // does nothing } // bad 👎 createHero( firstName, lastName, inventorOf ); // good 👍 createHero( firstName, lastName, inventorOf, ); // good 👍 (note that a comma must not appear after a \"rest\" element) createHero( firstName, lastName, inventorOf, ...heroArgs ); "},{"title":"Semicolons","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#semicolons","content":""},{"title":"Yup.","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#yup","content":"eslint: semi Why? When JavaScript encounters a line break without a semicolon, it uses a set of rules called Automatic Semicolon Insertion to determine whether or not it should regard that line break as the end of a statement, and (as the name implies) place a semicolon into your code before the line break if it thinks so. ASI contains a few eccentric behaviors, though, and your code will break if JavaScript misinterprets your line break. These rules will become more complicated as new features become a part of JavaScript. Explicitly terminating your statements and configuring your linter to catch missing semicolons will help prevent you from encountering issues. Copy // bad 👎 - raises exception const luke ={} const leia ={} [luke, leia].forEach((jedi)=> jedi.father='vader') // bad 👎 - raises exception const reaction =\"No! That’s impossible!\" (asyncfunctionmeanwhileOnTheFalcon(){ // handle `leia`, `lando`, `chewie`, `r2`, `c3p0` // ... }()) // bad 👎 - returns `undefined` instead of the value on the next line - always happens when `return` is on a line by itself because of ASI! functionfoo(){ return 'search your feelings, you know it to be foo' } // good 👍 const luke ={}; const leia ={}; [luke, leia].forEach((jedi)=>{ jedi.father='vader'; }); // good 👍 const reaction =\"No! That’s impossible!\"; (asyncfunctionmeanwhileOnTheFalcon(){ // handle `leia`, `lando`, `chewie`, `r2`, `c3p0` // ... }()); // good 👍 functionfoo(){ return'search your feelings, you know it to be foo'; } "},{"title":"Type Casting & Coercion","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#type-casting--coercion","content":""},{"title":"Type Coercion at Start","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#type-coercion-at-start","content":"Perform type coercion at the beginning of the statement. "},{"title":"Strings","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#strings-1","content":"eslint: no-new-wrappers Copy // => this.reviewScore = 9; // bad 👎 const totalScore =newString(this.reviewScore);// typeof totalScore is \"object\" not \"string\" // bad 👎 const totalScore =this.reviewScore+'';// invokes this.reviewScore.valueOf() // bad 👎 const totalScore =this.reviewScore.toString();// isn’t guaranteed to return a string // good 👍 const totalScore =String(this.reviewScore); "},{"title":"Numbers","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#numbers","content":"Use Number for type casting and parseInt always with a radix for parsing strings. eslint: radixno-new-wrappers Copy const inputValue ='4'; // bad 👎 const val =newNumber(inputValue); // bad 👎 const val =+inputValue; // bad 👎 const val = inputValue >>0; // bad 👎 const val =parseInt(inputValue); // good 👍 const val =Number(inputValue); // good 👍 const val =parseInt(inputValue,10); "},{"title":"parseInt","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#parseint","content":"If for whatever reason you are doing something wild and parseInt is your bottleneck and need to use Bitshift for performance reasons, leave a comment explaining why and what you’re doing. Copy // good 👍 /** * parseInt was the reason my code was slow. * Bitshifting the String to coerce it to a * Number made it a lot faster. */ const val = inputValue >>0; "},{"title":"Bitshift Operations","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#bitshift-operations","content":"Note: Be careful when using bitshift operations. Numbers are represented as 64-bit values, but bitshift operations always return a 32-bit integer (source). Bitshift can lead to unexpected behavior for integer values larger than 32 bits. Discussion. Largest signed 32-bit Int is 2,147,483,647: Copy 2147483647>>0;// => 2147483647 2147483648>>0;// => -2147483648 2147483649>>0;// => -2147483647 "},{"title":"Booleans","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#booleans","content":"eslint: no-new-wrappers Copy const age =0; // bad 👎 const hasAge =newBoolean(age); // good 👍 const hasAge =Boolean(age); // best const hasAge =!!age; "},{"title":"Naming Conventions","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#naming-conventions","content":""},{"title":"Naming Length","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#naming-length","content":"Avoid single letter names. Be descriptive with your naming. eslint: id-length Copy // bad 👎 functionq(){ // ... } // good 👍 functionquery(){ // ... } "},{"title":"camelCase","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#camelcase","content":"Use camelCase when naming objects, functions, and instances. eslint: camelcase Copy // bad 👎 constOBJEcttsssss={}; const this_is_my_object ={}; functionc(){} // good 👍 const thisIsMyObject ={}; functionthisIsMyFunction(){} camelCase Export Usage# Use camelCase when you export-default a function. Your filename should be identical to your function’s name. Copy functionmakeStyleGuide(){ // ... } exportdefault makeStyleGuide; More camelCase Usage# Use camelCase for variables, properties and function names Variables, properties and function names should use camelCase. They should also be descriptive. Single character variables and uncommon abbreviations should generally be avoided. Copy // bad 👎 var admin_user = db.query('SELECT * FROM users ...'); // good 👍 var adminUser = db.query('SELECT * FROM users ...'); "},{"title":"PascalCase","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#pascalcase","content":"Use PascalCase only when naming constructors or classes. eslint: new-cap Copy // bad 👎 functionuser(options){ this.name= options.name; } const bad =newuser({ name:'nope', }); // good 👍 classUser{ constructor(options){ this.name= options.name; } } const good =newUser({ name:'yup', }); PascalCase Export Usage# Use PascalCase when you export a constructor / class / singleton / function library / bare object. Copy constAirbnbStyleGuide={ es6:{ }, }; exportdefaultAirbnbStyleGuide; "},{"title":"No Underscore Dangle","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#no-underscore-dangle","content":"Do not use trailing or leading underscores. eslint: no-underscore-dangle Why? JavaScript does not have the concept of privacy in terms of properties or methods. Although a leading underscore is a common convention to mean “private”, in fact, these properties are fully public, and as such, are part of your public API contract. This convention might lead developers to wrongly think that a change won’t count as breaking, or that tests aren’t needed. tl;dr: if you want something to be “private”, it must not be observably present. Copy // bad 👎 this.__firstName__='Panda'; this.firstName_='Panda'; this._firstName='Panda'; // good 👍 this.firstName='Panda'; // good 👍 , in environments where WeakMaps are available // see https://kangax.github.io/compat-table/es6/#test-WeakMap const firstNames =newWeakMap(); firstNames.set(this,'Panda'); "},{"title":"No this References","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#no-this-references","content":"Don’t save references to this. Use arrow functions or Function#bind. Copy // bad 👎 functionfoo(){ const self =this; returnfunction(){ console.log(self); }; } // bad 👎 functionfoo(){ const that =this; returnfunction(){ console.log(that); }; } // good 👍 functionfoo(){ return()=>{ console.log(this); }; } "},{"title":"Filename Export Matching","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#filename-export-matching","content":"A base filename should exactly match the name of its default export. Copy // file 1 contents classCheckBox{ // ... } exportdefaultCheckBox; // file 2 contents exportdefaultfunctionfortyTwo(){return42;} // file 3 contents exportdefaultfunctioninsideDirectory(){} // in some other file // bad 👎 importCheckBoxfrom'./checkBox';// PascalCase import/export, camelCase filename importFortyTwofrom'./FortyTwo';// PascalCase import/filename, camelCase export importInsideDirectoryfrom'./InsideDirectory';// PascalCase import/filename, camelCase export // bad 👎 importCheckBoxfrom'./check_box';// PascalCase import/export, snake_case filename import forty_two from'./forty_two';// snake_case import/filename, camelCase export import inside_directory from'./inside_directory';// snake_case import, camelCase export import index from'./inside_directory/index';// requiring the index file explicitly import insideDirectory from'./insideDirectory/index';// requiring the index file explicitly // good 👍 importCheckBoxfrom'./CheckBox';// PascalCase export/import/filename import fortyTwo from'./fortyTwo';// camelCase export/import/filename import insideDirectory from'./insideDirectory';// camelCase export/import/directory name/implicit \"index\" // ^ supports both insideDirectory.js and insideDirectory/index.js "},{"title":"Acronyms and Initialisms","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#acronyms-and-initialisms","content":"Acronyms and initialisms should always be all uppercased, or all lowercased. Why? Names are for readability, not to appease a computer algorithm. Copy // bad 👎 importSmsContainerfrom'./containers/SmsContainer'; // bad 👎 constHttpRequests=[ // ... ]; // good 👍 importSMSContainerfrom'./containers/SMSContainer'; // good 👍 constHTTPRequests=[ // ... ]; // also good const httpRequests =[ // ... ]; // best importTextMessageContainerfrom'./containers/TextMessageContainer'; // best const requests =[ // ... ]; "},{"title":"Optional UPPERCASE","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#optional-uppercase","content":"You may optionally uppercase a constant only if it (1) is exported, (2) is a const (it can not be reassigned), and (3) the programmer can trust it (and its nested properties) to never change. Why? This is an additional tool to assist in situations where the programmer would be unsure if a variable might ever change. UPPERCASE_VARIABLES are letting the programmer know that they can trust the variable (and its properties) not to change. What about all const variables? - This is unnecessary, so uppercasing should not be used for constants within a file. It should be used for exported constants however.What about exported objects? - Uppercase at the top level of export (e.g. EXPORTED_OBJECT.key) and maintain that all nested properties do not change. Copy // bad 👎 constPRIVATE_VARIABLE='should not be unnecessarily uppercased within a file'; // bad 👎 exportconstTHING_TO_BE_CHANGED='should obviously not be uppercased'; // bad 👎 exportletREASSIGNABLE_VARIABLE='do not use let with uppercase variables'; // --- // allowed but does not supply semantic value exportconst apiKey ='SOMEKEY'; // better in most cases exportconstAPI_KEY='SOMEKEY'; // --- // bad 👎 - unnecessarily uppercases key while adding no semantic value exportconstMAPPING={ KEY:'value' }; // good 👍 exportconstMAPPING={ key:'value' }; Use UPPERCASE for Constants# Constants should be declared as regular variables or static class properties, using all uppercase letters. Copy // bad 👎 const second =1*1000; functionFile(){ } File.fullPermissions=0777; // good 👍 varSECOND=1*1000; functionFile(){ } File.FULL_PERMISSIONS=0777; "},{"title":"Accessors","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#accessors","content":""},{"title":"Accessor Functions","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#accessor-functions","content":"Accessor functions for properties are not required. "},{"title":"Getters / Setters","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#getters--setters","content":"Do not use JavaScript getters/setters as they cause unexpected side effects and are harder to test, maintain, and reason about. Instead, if you do make accessor functions, use getVal() and setVal('hello'). Copy // bad 👎 classDragon{ getage(){ // ... } setage(value){ // ... } } // good 👍 classDragon{ getAge(){ // ... } setAge(value){ // ... } } "},{"title":"boolean Property","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#boolean-property","content":"If the property/method is a boolean, use isVal() or hasVal(). Copy // bad 👎 if(!dragon.age()){ returnfalse; } // good 👍 if(!dragon.hasAge()){ returnfalse; } It’s okay to create get() and set() functions, but be consistent. Copy classJedi{ constructor(options ={}){ const lightsaber = options.lightsaber||'blue'; this.set('lightsaber', lightsaber); } set(key, val){ this[key]= val; } get(key){ returnthis[key]; } } "},{"title":"Events","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#events","content":""},{"title":"Data Payloads","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#data-payloads","content":"When attaching data payloads to events (whether DOM events or something more proprietary like Backbone events), pass an object literal (also known as a \"hash\") instead of a raw value. This allows a subsequent contributor to add more data to the event payload without finding and updating every handler for the event. For example, instead of: Copy // bad 👎 $(this).trigger('listingUpdated', listing.id); // ... $(this).on('listingUpdated',(e, listingID)=>{ // do something with listingID }); prefer: Copy // good 👍 $(this).trigger('listingUpdated',{ listingID: listing.id}); // ... $(this).on('listingUpdated',(e, data)=>{ // do something with data.listingID }); "},{"title":"jQuery","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#jquery","content":""},{"title":"jQuery Object Variables","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#jquery-object-variables","content":"Prefix jQuery object variables with a $. Copy // bad 👎 const sidebar =$('.sidebar'); // good 👍 const $sidebar =$('.sidebar'); // good 👍 const $sidebarBtn =$('.sidebar-btn'); "},{"title":"Cache jQuery lookups.","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#cache-jquery-lookups","content":"Copy // bad 👎 functionsetSidebar(){ $('.sidebar').hide(); // ... $('.sidebar').css({ 'background-color':'pink', }); } // good 👍 functionsetSidebar(){ const $sidebar =$('.sidebar'); $sidebar.hide(); // ... $sidebar.css({ 'background-color':'pink', }); } "},{"title":"DOM Queries","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#dom-queries","content":"For DOM queries use Cascading $('.sidebar ul') or parent > child $('.sidebar > ul'). Performance Testing Link - jsPerf "},{"title":"Scoped jQuery Object Queries","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#scoped-jquery-object-queries","content":"Use find with scoped jQuery object queries. Copy // bad 👎 $('ul','.sidebar').hide(); // bad 👎 $('.sidebar').find('ul').hide(); // good 👍 $('.sidebar ul').hide(); // good 👍 $('.sidebar > ul').hide(); // good 👍 $sidebar.find('ul').hide(); "},{"title":"ECMAScript 5 Compatibility","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#ecmascript-5-compatibility","content":""},{"title":"Kangax","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#kangax","content":"Refer to Kangax’s ES5 compatibility table. "},{"title":"ECMAScript 6+ (ES 2015+) Styles","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#ecmascript-6-es-2015-styles","content":""},{"title":"ES6+ Features","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#es6-features","content":"This is a collection of links to the various ES6+ features. Arrow Functions Classes Object Shorthand Object Concise Object Computed Properties Template Strings Destructuring Default Parameters Rest Array Spreads Let and Const Exponentiation Operator Iterators and Generators Modules 28.2 Do not use TC39 proposals that have not reached stage 3. Why? They are not finalized, and they are subject to change or to be withdrawn entirely. We want to use JavaScript, and proposals are not JavaScript yet. "},{"title":"Standard Library","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#standard-library","content":"The Standard Librarycontains utilities that are functionally broken but remain for legacy reasons. "},{"title":"Number.isNaN","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#numberisnan","content":"Use Number.isNaN instead of global isNaN. eslint: no-restricted-globals Why? The global isNaN coerces non-numbers to numbers, returning true for anything that coerces to NaN. If this behavior is desired, make it explicit. Copy // bad 👎 isNaN('1.2');// false isNaN('1.2.3');// true // good 👍 Number.isNaN('1.2.3');// false Number.isNaN(Number('1.2.3'));// true "},{"title":"Number.isFinite","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#numberisfinite","content":"Use Number.isFinite instead of global isFinite. eslint: no-restricted-globals Why? The global isFinite coerces non-numbers to numbers, returning true for anything that coerces to a finite number. If this behavior is desired, make it explicit. Copy // bad 👎 isFinite('2e3');// true // good 👍 Number.isFinite('2e3');// false Number.isFinite(parseInt('2e3',10));// true "},{"title":"Testing","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#testing","content":""},{"title":"Yup.","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#yup-1","content":"Copy functionfoo(){ returntrue; } "},{"title":"No, but seriously:","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#no-but-seriously","content":"Whichever testing framework you use, you should be writing tests! Strive to write many small pure functions, and minimize where mutations occur.Be cautious about stubs and mocks - they can make your tests more brittle.We primarily use mocha and jest at Airbnb. tape is also used occasionally for small, separate modules.100% test coverage is a good goal to strive for, even if it’s not always practical to reach it.Whenever you fix a bug, write a regression test. A bug fixed without a regression test is almost certainly going to break again in the future. "},{"title":"Performance","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#performance","content":"On Layout & Web PerformanceString vs Array ConcatTry/Catch Cost In a LoopBang FunctionjQuery Find vs Context, SelectorinnerHTML vs textContent for script textLong String ConcatenationAre JavaScript functions like map(), reduce(), and filter() optimized for traversing arrays? "},{"title":"Resources","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#resources","content":"Learning ES6+ Latest ECMA specExploringJSES6 Compatibility TableComprehensive Overview of ES6 Features Read This Standard ECMA-262 Tools Code Style Linters ESlint - Airbnb Style .eslintrcJSHint - Airbnb Style .jshintrc Neutrino Preset - @neutrinojs/airbnb Other Style Guides Google JavaScript Style GuideGoogle JavaScript Style Guide (Old)jQuery Core Style GuidelinesPrinciples of Writing Consistent, Idiomatic JavaScriptStandardJS Other Styles Naming this in nested functions - Christian JohansenConditional Callbacks - Ross AllenPopular JavaScript Coding Conventions on GitHub - JeongHoon ByunMultiple var statements in JavaScript, not superfluous - Ben Alman Further Reading Understanding JavaScript Closures - Angus CrollBasic JavaScript for the impatient programmer - Dr. Axel RauschmayerYou Might Not Need jQuery - Zack Bloom & Adam SchwartzES6 Features - Luke HobanFrontend Guidelines - Benjamin De Cock Books JavaScript: The Good Parts - Douglas CrockfordJavaScript Patterns - Stoyan StefanovPro JavaScript Design Patterns - Ross Harmes and Dustin DiazHigh Performance Web Sites: Essential Knowledge for Front-End Engineers - Steve SoudersMaintainable JavaScript - Nicholas C. ZakasJavaScript Web Applications - Alex MacCawPro JavaScript Techniques - John ResigSmashing Node.js: JavaScript Everywhere - Guillermo RauchSecrets of the JavaScript Ninja - John Resig and Bear BibeaultHuman JavaScript - Henrik JoretegSuperhero.js - Kim Joar Bekkelund, Mads Mobæk, & Olav BjorkoyJSBooks - Julien BouquillonThird Party JavaScript - Ben Vinegar and Anton KovalyovEffective JavaScript: 68 Specific Ways to Harness the Power of JavaScript - David HermanEloquent JavaScript - Marijn HaverbekeYou Don’t Know JS: ES6 & Beyond - Kyle Simpson Blogs JavaScript WeeklyJavaScript, JavaScript...Bocoup WeblogAdequately GoodNCZOnlinePerfection KillsBen AlmanDmitry Baranovskiynettuts Podcasts JavaScript AirJavaScript Jabber "},{"title":"Versioning","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#versioning","content":"We use Major.Minor.Batch style for styles versioning. For the versions available, see the [tags on this repository]. "},{"title":"Authors","type":1,"pageTitle":"Javascript Style Guide","url":"docs/javascript#authors","content":"Girish Dhote gdhote@wwnorton.comW. W. Norton Digital Engineering Team "}]