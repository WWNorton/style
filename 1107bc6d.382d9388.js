(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{62:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return c})),a.d(t,"metadata",(function(){return o})),a.d(t,"rightToc",(function(){return r})),a.d(t,"default",(function(){return s}));var n=a(2),b=a(6),l=(a(0),a(90)),c={id:"typescript",title:"Typescript Style Guide",sidebar_label:"Typescript"},o={unversionedId:"typescript",id:"typescript",isDocsHomePage:!1,title:"Typescript Style Guide",description:"Variable and Function",source:"@site/docs/typescript-style.md",permalink:"/style-guides/docs/typescript",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/typescript-style.md",lastUpdatedBy:"Jonathan Chan",lastUpdatedAt:1597779230,sidebar_label:"Typescript",sidebar:"docs",previous:{title:"React Style Guide",permalink:"/style-guides/docs/react"},next:{title:"CSS/SASS Style Guide",permalink:"/style-guides/docs/css-sass"}},r=[{value:"Variable and Function",id:"variable-and-function",children:[]},{value:"Class",id:"class",children:[]},{value:"Interface",id:"interface",children:[]},{value:"Type",id:"type",children:[]},{value:"Namespace",id:"namespace",children:[]},{value:"Enum",id:"enum",children:[]},{value:"Null vs. Undefined",id:"null-vs-undefined",children:[]},{value:"Formatting",id:"formatting",children:[]},{value:"Quotes",id:"quotes",children:[]},{value:"Spaces",id:"spaces",children:[]},{value:"Semicolons",id:"semicolons",children:[]},{value:"Array",id:"array",children:[]},{value:"Filename",id:"filename",children:[]},{value:"type vs. interface",id:"type-vs-interface",children:[]}],i={rightToc:r};function s(e){var t=e.components,a=Object(b.a)(e,["components"]);return Object(l.b)("wrapper",Object(n.a)({},i,a,{components:t,mdxType:"MDXLayout"}),Object(l.b)("h2",{id:"variable-and-function"},"Variable and Function"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Use ",Object(l.b)("inlineCode",{parentName:"li"},"camelCase")," for variable and function names")),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"Reason: Conventional JavaScript")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Bad")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"var FooVar;\nfunction BarFunc() { }\n")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Good")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"var fooVar;\nfunction barFunc() { }\n")),Object(l.b)("h2",{id:"class"},"Class"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Use ",Object(l.b)("inlineCode",{parentName:"li"},"PascalCase")," for class names.")),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"Reason: This is actually fairly conventional in standard JavaScript.")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Bad")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"class foo { }\n")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Good")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"class Foo { }\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Use ",Object(l.b)("inlineCode",{parentName:"li"},"camelCase")," of class members and methods")),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"Reason: Naturally follows from variable and function naming convention.")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Bad")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"class Foo {\n    Bar: number;\n    Baz() { }\n}\n")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Good")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"class Foo {\n    bar: number;\n    baz() { }\n}\n")),Object(l.b)("h2",{id:"interface"},"Interface"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Use ",Object(l.b)("inlineCode",{parentName:"li"},"PascalCase")," for name.")),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"Reason: Similar to class")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Use ",Object(l.b)("inlineCode",{parentName:"li"},"camelCase")," for members.")),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"Reason: Similar to class")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("strong",{parentName:"li"},"Don't")," prefix with ",Object(l.b)("inlineCode",{parentName:"li"},"I"))),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"Reason: Unconventional. ",Object(l.b)("inlineCode",{parentName:"p"},"lib.d.ts")," defines important interfaces without an ",Object(l.b)("inlineCode",{parentName:"p"},"I")," (e.g. Window, Document etc).")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Bad")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"interface IFoo {\n}\n")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Good")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"interface Foo {\n}\n")),Object(l.b)("h2",{id:"type"},"Type"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Use ",Object(l.b)("inlineCode",{parentName:"li"},"PascalCase")," for name.")),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"Reason: Similar to class")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Use ",Object(l.b)("inlineCode",{parentName:"li"},"camelCase")," for members.")),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"Reason: Similar to class")),Object(l.b)("h2",{id:"namespace"},"Namespace"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Use ",Object(l.b)("inlineCode",{parentName:"li"},"PascalCase")," for names")),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"Reason: Convention followed by the TypeScript team. Namespaces are effectively just a class with static members. Class names are ",Object(l.b)("inlineCode",{parentName:"p"},"PascalCase")," => Namespace names are ",Object(l.b)("inlineCode",{parentName:"p"},"PascalCase"))),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Bad")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"namespace foo {\n}\n")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Good")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"namespace Foo {\n}\n")),Object(l.b)("h2",{id:"enum"},"Enum"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Use ",Object(l.b)("inlineCode",{parentName:"li"},"PascalCase")," for enum names")),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"Reason: Similar to Class. Is a Type.")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Bad")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"enum color {\n}\n")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Good")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"enum Color {\n}\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Use ",Object(l.b)("inlineCode",{parentName:"li"},"PascalCase")," for enum member")),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"Reason: Convention followed by TypeScript team i.e. the language creators e.g ",Object(l.b)("inlineCode",{parentName:"p"},"SyntaxKind.StringLiteral"),". Also helps with translation (code generation) of other languages into TypeScript.")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Bad")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"enum Color {\n    red\n}\n")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Good")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"enum Color {\n    Red\n}\n")),Object(l.b)("h2",{id:"null-vs-undefined"},"Null vs. Undefined"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Prefer not to use either for explicit unavailability")),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"Reason: these values are commonly used to keep a consistent structure between values. In TypeScript you use ",Object(l.b)("em",{parentName:"p"},"types")," to denote the structure")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Bad")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"let foo = {x:123,y:undefined};\n")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Good")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"let foo:{x:number,y?:number} = {x:123};\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Use ",Object(l.b)("inlineCode",{parentName:"li"},"undefined")," in general (do consider returning an object like ",Object(l.b)("inlineCode",{parentName:"li"},"{valid:boolean,value?:Foo}")," instead)")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},Object(l.b)("em",{parentName:"strong"},"Bad"))),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"return null;\n")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},Object(l.b)("em",{parentName:"strong"},"Good"))),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"return undefined;\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Use ",Object(l.b)("inlineCode",{parentName:"li"},"null")," where its a part of the API or conventional")),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"Reason: It is conventional in Node.js e.g. ",Object(l.b)("inlineCode",{parentName:"p"},"error")," is ",Object(l.b)("inlineCode",{parentName:"p"},"null")," for NodeBack style callbacks.")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Bad")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"cb(undefined)\n")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Good")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"cb(null)\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Use ",Object(l.b)("em",{parentName:"li"},"truthy")," check for ",Object(l.b)("strong",{parentName:"li"},"objects")," being ",Object(l.b)("inlineCode",{parentName:"li"},"null")," or ",Object(l.b)("inlineCode",{parentName:"li"},"undefined"))),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Bad")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"if (error === null)\n")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Good")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"if (error)\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Use ",Object(l.b)("inlineCode",{parentName:"li"},"== null")," / ",Object(l.b)("inlineCode",{parentName:"li"},"!= null")," (not ",Object(l.b)("inlineCode",{parentName:"li"},"===")," / ",Object(l.b)("inlineCode",{parentName:"li"},"!=="),") to check for ",Object(l.b)("inlineCode",{parentName:"li"},"null")," / ",Object(l.b)("inlineCode",{parentName:"li"},"undefined")," on primitives as it works for both ",Object(l.b)("inlineCode",{parentName:"li"},"null"),"/",Object(l.b)("inlineCode",{parentName:"li"},"undefined")," but not other falsy values (like ",Object(l.b)("inlineCode",{parentName:"li"},"''"),",",Object(l.b)("inlineCode",{parentName:"li"},"0"),",",Object(l.b)("inlineCode",{parentName:"li"},"false"),") e.g.")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Bad")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"if (error !== null) // does not rule out undefined\n")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"Good")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"if (error != null) // rules out both null and undefined\n")),Object(l.b)("h2",{id:"formatting"},"Formatting"),Object(l.b)("p",null,"The TypeScript compiler ships with a very nice formatting language service. Whatever output it gives by default is good enough to reduce the cognitive overload on the team."),Object(l.b)("p",null,"Use ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/vvakame/typescript-formatter"}),Object(l.b)("inlineCode",{parentName:"a"},"tsfmt"))," to automatically format your code on the command line. Also your IDE (atom/vscode/vs/sublime) already has formatting support built-in."),Object(l.b)("p",null,"Examples:"),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),'// Space before type i.e. foo:<space>string\nconst foo: string = "hello";\n')),Object(l.b)("h2",{id:"quotes"},"Quotes"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Prefer single quotes (",Object(l.b)("inlineCode",{parentName:"li"},"'"),") unless escaping.")),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"Reason: More JavaScript teams do this (e.g. ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/airbnb/javascript"}),"airbnb"),", ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/feross/standard"}),"standard"),", ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/npm/npm"}),"npm"),", ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/nodejs/node"}),"node"),", ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/angular/angular/"}),"google/angular"),", ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/facebook/react"}),"facebook/react"),"). Its easier to type (no shift needed on most keyboards). ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/prettier/prettier/issues/1105"}),"Prettier team recommends single quotes as well"))),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"Double quotes are not without merit: Allows easier copy paste of objects into JSON. Allows people to use other languages to work without changing their quote character. Allows you to use apostrophes e.g. ",Object(l.b)("inlineCode",{parentName:"p"},"He's not going."),". But I'd rather not deviate from where the JS Community is fairly decided.")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"When you can't use double quotes, try using back ticks (","`",").")),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"Reason: These generally represent the intent of complex enough strings.")),Object(l.b)("h2",{id:"spaces"},"Spaces"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Use ",Object(l.b)("inlineCode",{parentName:"li"},"2")," spaces. Not tabs.")),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"Reason: More JavaScript teams do this (e.g. ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/airbnb/javascript"}),"airbnb"),", ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/rwaldron/idiomatic.js"}),"idiomatic"),", ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/feross/standard"}),"standard"),", ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/npm/npm"}),"npm"),", ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/nodejs/node"}),"node"),", ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/angular/angular/"}),"google/angular"),", ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/facebook/react"}),"facebook/react"),"). The TypeScript/VSCode teams use 4 spaces but are definitely the exception in the ecosystem.")),Object(l.b)("h2",{id:"semicolons"},"Semicolons"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Use semicolons.")),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"Reasons: Explicit semicolons helps language formatting tools give consistent results. Missing ASI (automatic semicolon insertion) can trip new devs e.g. ",Object(l.b)("inlineCode",{parentName:"p"},"foo() \\n (function(){})")," will be a single statement (not two). TC39 ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/tc39/ecma262/pull/1062"}),"warning on this as well"),". Example teams: ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/airbnb/javascript"}),"airbnb"),", ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/rwaldron/idiomatic.js"}),"idiomatic"),", ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/angular/angular/"}),"google/angular"),", ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/facebook/react"}),"facebook/react"),", ",Object(l.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/Microsoft/TypeScript/"}),"Microsoft/TypeScript"),".")),Object(l.b)("h2",{id:"array"},"Array"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Annotate arrays as ",Object(l.b)("inlineCode",{parentName:"li"},"foos:Foo[]")," instead of ",Object(l.b)("inlineCode",{parentName:"li"},"foos:Array<Foo>"),".")),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"Reasons: Its easier to read. Its used by the TypeScript team. Makes easier to know something is an array as the mind is trained to detect ",Object(l.b)("inlineCode",{parentName:"p"},"[]"),".")),Object(l.b)("h2",{id:"filename"},"Filename"),Object(l.b)("p",null,"Name files with ",Object(l.b)("inlineCode",{parentName:"p"},"camelCase"),". E.g. ",Object(l.b)("inlineCode",{parentName:"p"},"accordion.tsx"),", ",Object(l.b)("inlineCode",{parentName:"p"},"myControl.tsx"),", ",Object(l.b)("inlineCode",{parentName:"p"},"utils.ts"),", ",Object(l.b)("inlineCode",{parentName:"p"},"map.ts")," etc."),Object(l.b)("blockquote",null,Object(l.b)("p",{parentName:"blockquote"},"Reason: Conventional across many JS teams.")),Object(l.b)("h2",{id:"type-vs-interface"},"type vs. interface"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Use ",Object(l.b)("inlineCode",{parentName:"li"},"type")," when you ",Object(l.b)("em",{parentName:"li"},"might")," need a union or intersection:")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"type Foo = number | { someProperty: number }\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Use ",Object(l.b)("inlineCode",{parentName:"li"},"interface")," when you want ",Object(l.b)("inlineCode",{parentName:"li"},"extends")," or ",Object(l.b)("inlineCode",{parentName:"li"},"implements")," e.g")),Object(l.b)("pre",null,Object(l.b)("code",Object(n.a)({parentName:"pre"},{}),"interface Foo {\n  foo: string;\n}\ninterface FooBar extends Foo {\n  bar: string;\n}\nclass X implements FooBar {\n  foo: string;\n  bar: string;\n}\n")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"Otherwise use whatever makes you happy that day.")))}s.isMDXComponent=!0}}]);